{"version":3,"sources":["../src/cli.js"],"names":["debug","commandDebug","options","cmd","_","find","option","Command","parent","rawArgs","slice","join","trackAndDebug","additionalParams","setup","pjson","version","context","session","load","program","command","group","description","action","commands","Info","run","notAlreadyInitialized","Init","isAuthenticated","instance","checkConnection","hasProjectPath","Attach","Login","Logout","SysInfo","hasProject","optionsToRun","trace","SocketDeployHot","SocketDeploy","SocketCompile","SocketEndpointCall","SocketList","name","socketName","SocketUninstall","SocketCreate","SocketConfig","SocketConfigSet","SocketConfigShow","SocketTrace","on","commandsArr","loadPlugins","parse","process","argv","length","outputHelp"],"mappings":"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","file":"cli.js","sourcesContent":["\nimport _ from 'lodash'\nimport Command from 'commander'\nimport program from './program'\nimport commands from './commands'\nimport context from './utils/context'\nimport validateCommands from './utils/validate-commands'\nimport initRaven from './utils/raven'\nimport session from './utils/session'\nimport logger from './utils/debug'\nimport pjson from '../package.json'\nimport { echo } from './utils/print-tools'\n\nconst { debug } = logger('main-cli')\ninitRaven()\n\nconst commandDebug = (options) => {\n  const cmd = _.find(options, (option) => option instanceof Command.Command)\n  debug(`Command: ${cmd.parent.rawArgs.slice(2).join(' ')}`)\n}\n\nconst trackAndDebug = (options, additionalParams) => {\n  commandDebug(options)\n}\n\nconst setup = async () => {\n  debug(pjson.version)\n  await context.session.load()\n\n  program\n    .version(pjson.version)\n\n  program\n    .command('info')\n    .group('Basics')\n    .description('Info about current project/instance/user etc.')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      new commands.Info(context).run(options)\n    })\n\n  program\n    .command('init')\n    .group('Basics')\n    .description('Start a Syncano project in the current directory')\n    .option('-i, --instance <name>',\n      'Instance you want to use for your project. If not provided, an Instance will be created')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.notAlreadyInitialized()\n      new commands.Init(context).run(options)\n    })\n\n  program\n    .command('attach')\n    .group('Basics')\n    .description('Attach project to the chosen Instance')\n    .option('-i, --instance <name>', 'Instance you want to use for your project')\n    .option('-c, --create-instance <name>', 'Create instance you want to use for your project')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      if (options[0].instance) {\n        await session.checkConnection(options[0].instance)\n      }\n      session.hasProjectPath()\n      echo()\n      new commands.Attach(context).run(options)\n    })\n\n  program\n    .command('login')\n    .group('Basics')\n    .description('Login to your account')\n    .action((...options) => {\n      trackAndDebug(options)\n      new commands.Login(context).run(options)\n    })\n\n  program\n    .command('logout')\n    .group('Basics')\n    .description('Logout from your current account')\n    .action((...options) => {\n      trackAndDebug(options)\n      new commands.Logout(context).run(options)\n    })\n\n  program\n    .command('sysinfo')\n    .group('Basics')\n    .description('Sys info for debug purpose')\n    .action((...options) => {\n      trackAndDebug(options)\n      new commands.SysInfo(context).run(options)\n    })\n\n  program\n    .command('hot [socket_name]')\n    .group('Project')\n    .description('Hot deploy to make your project continuously synced to the Syncano cloud')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n\n      const optionsToRun = options\n      optionsToRun[1].trace = true\n      echo()\n      new commands.SocketDeployHot(context).run(optionsToRun)\n    })\n\n  program\n    .command('deploy [socket_name]')\n    .group('Project')\n    .description('Synchronize your project to Syncano')\n    .option('--hot', 'Enable Hot deploy')\n    .option('-b, --bail', 'Bail after first deploy failure')\n    .option('-i, --create-instance <instance>', 'Create instance if it doesn\\'t exist')\n    .option('-t, --trace', 'Turn on showing traces')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProjectPath()\n      await session.checkConnection()\n      echo()\n      new commands.SocketDeploy(context).run(options)\n    })\n\n  program\n    .command('compile [socket_name]')\n    .group('Project')\n    .description('Compile Socket')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      echo()\n      new commands.SocketCompile(context).run(options)\n    })\n\n  program\n    .command('call <socket_name>/<endpoint>')\n    .group('Project')\n    .description(\"Call Socket's endpoint\")\n    .option('-b, --body', 'Print only body of the response')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketEndpointCall(context).run(options)\n    })\n\n  program\n    .command('list [socket_name]')\n    .group('Sockets')\n    .description('List the installed Sockets')\n    .option('-f, --full', 'Print the detailed information (including parameters and response)')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketList(context).run(options)\n    })\n\n  program\n    .command('remove <socket_name>')\n    .group('Sockets')\n    .description('Remove a Socket from your project')\n    .action(async (...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketUninstall(context).run(options)\n    })\n\n  program\n    .command('create <socket_name>')\n    .group('Sockets')\n    .description('Create a new Socket for your project')\n    .action((...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      session.hasProject()\n      new commands.SocketCreate(context).run(options)\n    })\n\n  program\n    .command('config <socket_name>')\n    .group('Sockets')\n    .description('Configure a given Socket')\n    .action(async (...options) => {\n      const [name] = options\n      trackAndDebug(options, { name })\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketConfig(context).run(options)\n    })\n\n  program\n    .command('config-set <socket_name> <option_name> <value>')\n    .group('Sockets')\n    .description('Configure a config option of a given Socket')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketConfigSet(context).run(options)\n    })\n\n  program\n    .command('config-show <socket_name>')\n    .group('Sockets')\n    .description('Show config options of a Socket')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketConfigShow(context).run(options)\n    })\n\n  program\n    .command('trace [socket_name]')\n    .group('Project')\n    .description('Trace Socket calls')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketTrace(context).run(options)\n    })\n\n  program\n    .command('backup', 'Menage your backups')\n    .on('*', (commandsArr) => validateCommands(commandsArr))\n\n  program\n    .command('hosting', 'Manage your web assets and host them on Syncano')\n    .on('*', (commandsArr) => validateCommands(commandsArr))\n\n  program\n    .command('instance', 'Manage your instances')\n    .on('*', (commandsArr) => validateCommands(commandsArr))\n\n  context.session.loadPlugins(program, context)\n  program.parse(process.argv)\n\n  if (!process.argv.slice(2).length) {\n    program.outputHelp()\n  }\n}\n\nsetup()\n"]}