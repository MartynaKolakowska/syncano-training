{"version":3,"sources":["../src/cli-backup.js"],"names":["setup","context","session","load","program","command","group","description","action","options","isAuthenticated","hasProject","checkConnection","commands","BackupsCreate","run","BackupsList","BackupsLast","option","BackupsDelete","process","argv","slice","length","outputHelp","parse"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA;AAAA,+BAAQ,aAAY;AACxB,UAAMC,kBAAQC,OAAR,CAAgBC,IAAhB,EAAN;;AAEAC,sBACGC,OADH,CACW,QADX,EAEGC,KAFH,CAES,QAFT,EAGGC,WAHH,CAGe,eAHf,EAIGC,MAJH;AAAA,oCAIU,WAAO,GAAGC,OAAV,EAAsB;AAC5BP,0BAAQQ,eAAR;AACAR,0BAAQS,UAAR;AACA,cAAMT,kBAAQU,eAAR,EAAN;AACA;AACA,YAAIC,mBAASC,aAAb,CAA2Bb,iBAA3B,EAAoCc,GAApC,CAAwCN,OAAxC;AACD,OAVH;;AAAA;AAAA;AAAA;AAAA;;AAYAL,sBACGC,OADH,CACW,MADX,EAEGC,KAFH,CAES,QAFT,EAGGC,WAHH,CAGe,cAHf,EAIGC,MAJH;AAAA,oCAIU,WAAO,GAAGC,OAAV,EAAsB;AAC5BP,0BAAQQ,eAAR;AACAR,0BAAQS,UAAR;AACA,cAAMT,kBAAQU,eAAR,EAAN;AACA;AACA,YAAIC,mBAASG,WAAb,CAAyBf,iBAAzB,EAAkCc,GAAlC,CAAsCN,OAAtC;AACD,OAVH;;AAAA;AAAA;AAAA;AAAA;;AAYAL,sBACGC,OADH,CACW,MADX,EAEGC,KAFH,CAES,QAFT,EAGGC,WAHH,CAGe,aAHf,EAIGC,MAJH;AAAA,oCAIU,WAAO,GAAGC,OAAV,EAAsB;AAC5BP,0BAAQQ,eAAR;AACAR,0BAAQS,UAAR;AACA,cAAMT,kBAAQU,eAAR,EAAN;AACA;AACA,YAAIC,mBAASI,WAAb,CAAyBhB,iBAAzB,EAAkCc,GAAlC,CAAsCN,OAAtC;AACD,OAVH;;AAAA;AAAA;AAAA;AAAA;;AAYAL,sBACGC,OADH,CACW,aADX,EAEGC,KAFH,CAES,QAFT,EAGGY,MAHH,CAGU,KAHV,EAGiB,oBAHjB,EAIGX,WAJH,CAIe,eAJf,EAKGC,MALH;AAAA,oCAKU,WAAO,GAAGC,OAAV,EAAsB;AAC5BP,0BAAQQ,eAAR;AACAR,0BAAQS,UAAR;AACA,cAAMT,kBAAQU,eAAR,EAAN;AACA;AACA,YAAIC,mBAASM,aAAb,CAA2BlB,iBAA3B,EAAoCc,GAApC,CAAwCN,OAAxC;AACD,OAXH;;AAAA;AAAA;AAAA;AAAA;;AAaA,QAAI,CAACW,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,MAA3B,EAAmC;AACjCnB,wBAAQoB,UAAR;AACD;;AAEDpB,sBAAQqB,KAAR,CAAcL,QAAQC,IAAtB;AACD,GAzDK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA2DArB","file":"cli-backup.js","sourcesContent":["\nimport program from './program'\nimport commands from './commands'\nimport session from './utils/session'\nimport context from './utils/context'\nimport { echo } from './utils/print-tools'\n\nconst setup = async () => {\n  await context.session.load()\n\n  program\n    .command('create')\n    .group('Backup')\n    .description('Create backup')\n    .action(async (...options) => {\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.BackupsCreate(context).run(options)\n    })\n\n  program\n    .command('list')\n    .group('Backup')\n    .description('List backups')\n    .action(async (...options) => {\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.BackupsList(context).run(options)\n    })\n\n  program\n    .command('last')\n    .group('Backup')\n    .description('Last backup')\n    .action(async (...options) => {\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.BackupsLast(context).run(options)\n    })\n\n  program\n    .command('delete <id>')\n    .group('Backup')\n    .option('all', 'Delete all backups')\n    .description('Delete backup')\n    .action(async (...options) => {\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.BackupsDelete(context).run(options)\n    })\n\n  if (!process.argv.slice(2).length) {\n    program.outputHelp()\n  }\n\n  program.parse(process.argv)\n}\n\nsetup()\n"]}