{"version":3,"sources":["../../../src/utils/init/init.js"],"names":["debug","Init","constructor","session","projectTemplates","allTemplates","builtInProjectTemplates","concat","installedTemplates","map","templateName","templateSpec","name","description","getTemplatesChoices","template","format","grey","createFilesAndFolders","pathToCopyTo","process","cwd","fs","copySync","dim","green","err","checkConfigFiles","existsSync","projectPath","checkIfInitiated","project","addConfigFiles","projectParams","settings","account","addProject","path","join","load","noConfigFiles"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;;;AAOA,MAAM,EAAEA,KAAF,KAAY,qBAAO,YAAP,CAAlB;;AAEA,MAAMC,IAAN,CAAW;AACTC,gBAAe;AACb,SAAKC,OAAL,GAAeA,iBAAf;AACD;;AAED,SAAOC,gBAAP,GAA2B;AACzB,UAAMC,eAAeC,mCAAwBC,MAAxB,CAA+B,2CAA/B,CAArB;AACA,UAAMC,qBAAqBH,aAAaI,GAAb,CAAiBC,gBAAgB;AAC1DV,YAAM,mBAAN,EAA2BU,YAA3B;AACA,YAAMC,eAAe,gCAAgBD,YAAhB,CAArB;;AAEA,aAAO,EAAEE,MAAMF,YAAR,EAAsBG,aAAaF,aAAaE,WAAhD,EAAP;AACD,KAL0B,CAA3B;AAMA,WAAOL,kBAAP;AACD;;AAED,SAAOM,mBAAP,GAA8B;AAC5B,WAAOb,KAAKG,gBAAL,GAAwBK,GAAxB,CAA4BM,YAAa,GAAEA,SAASF,WAAY,IAAGG,gBAAOC,IAAP,CAAa,MAAKF,SAASH,IAAK,GAAhC,CAAoC,EAAvG,CAAP;AACD;;AAEDM,wBAAuBC,eAAeC,QAAQC,GAAR,EAAtC,EAAqD;AACnDrB,UAAM,yBAAN;;AAEA,QAAI;AACFA,YAAM,gBAAN,EAAwB,KAAKU,YAA7B;AACAV,YAAM,kBAAN,EAA0BmB,YAA1B;AACAG,wBAAGC,QAAH,CAAY,4BAAY,KAAKb,YAAjB,CAAZ,EAA4CS,YAA5C;AACA,4BAAK,CAAL,EAAQH,gBAAOQ,GAAP,CAAY,iCAAgCR,gBAAOS,KAAP,CAAa,KAAKf,YAAlB,CAAgC,YAA5E,CAAR;AACA;AACD,KAND,CAME,OAAOgB,GAAP,EAAY;AACZ,4BAAKA,GAAL;AACA,YAAMA,GAAN;AACD;AACF;;AAEDC,qBAAoB;AAClB,WAAO,CAACL,kBAAGM,UAAH,CAAc,KAAKzB,OAAL,CAAa0B,WAA3B,CAAR;AACD;;AAEDC,qBAAoB;AAClB,WAAOR,kBAAGM,UAAH,CAAc,KAAKzB,OAAL,CAAa0B,WAA3B,KAA2C,KAAK1B,OAAL,CAAa4B,OAA/D;AACD;;AAEKC,gBAAN,CAAsBC,gBAAgB,EAAtC,EAA0CJ,WAA1C,EAAuD;AAAA;;AAAA;AACrD,UAAIA,WAAJ,EAAiB;AACf,cAAK1B,OAAL,CAAa+B,QAAb,CAAsBC,OAAtB,CAA8BC,UAA9B,CAAyCP,WAAzC,EAAsDI,aAAtD;AACD,OAFD,MAEO;AACL,cAAK9B,OAAL,CAAa+B,QAAb,CAAsBC,OAAtB,CAA8BC,UAA9B,CAAyCC,eAAKC,IAAL,CAAUlB,QAAQC,GAAR,EAAV,CAAzC,EAAmEY,aAAnE;AACD;AACD,YAAM,MAAK9B,OAAL,CAAaoC,IAAb,EAAN;AANqD;AAOtD;;AAEDC,kBAAiB;AACfxC,UAAM,iBAAN;AACA,SAAKkB,qBAAL;AACD;AAvDQ;;kBA0DIjB,I","file":"init.js","sourcesContent":["import fs from 'fs-extra'\nimport format from 'chalk'\nimport path from 'path'\n\nimport session from '../session'\nimport logger from '../debug'\nimport { echo } from '../print-tools'\nimport {\n  getTemplateSpec,\n  getTemplate,\n  builtInProjectTemplates,\n  installedProjectTemplates\n} from '../templates'\n\nconst { debug } = logger('utils-init')\n\nclass Init {\n  constructor () {\n    this.session = session\n  }\n\n  static projectTemplates () {\n    const allTemplates = builtInProjectTemplates.concat(installedProjectTemplates())\n    const installedTemplates = allTemplates.map(templateName => {\n      debug('loading template:', templateName)\n      const templateSpec = getTemplateSpec(templateName)\n\n      return { name: templateName, description: templateSpec.description }\n    })\n    return installedTemplates\n  }\n\n  static getTemplatesChoices () {\n    return Init.projectTemplates().map(template => `${template.description} ${format.grey(`- (${template.name})`)}`)\n  }\n\n  createFilesAndFolders (pathToCopyTo = process.cwd()) {\n    debug('createFilesAndFolders()')\n\n    try {\n      debug('Template name:', this.templateName)\n      debug('Path to copy to:', pathToCopyTo)\n      fs.copySync(getTemplate(this.templateName), pathToCopyTo)\n      echo(4)(format.dim(`Project has been created from ${format.green(this.templateName)} template.`))\n      echo()\n    } catch (err) {\n      echo(err)\n      throw err\n    }\n  }\n\n  checkConfigFiles () {\n    return !fs.existsSync(this.session.projectPath)\n  }\n\n  checkIfInitiated () {\n    return fs.existsSync(this.session.projectPath) && this.session.project\n  }\n\n  async addConfigFiles (projectParams = {}, projectPath) {\n    if (projectPath) {\n      this.session.settings.account.addProject(projectPath, projectParams)\n    } else {\n      this.session.settings.account.addProject(path.join(process.cwd()), projectParams)\n    }\n    await this.session.load()\n  }\n\n  noConfigFiles () {\n    debug('noConfigFiles()')\n    this.createFilesAndFolders()\n  }\n}\n\nexport default Init\n"]}