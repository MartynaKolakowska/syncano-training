{"version":3,"sources":["../../../src/utils/sockets/utils.js"],"names":["debug","socketTemplates","installedTemplatesNames","allTemplatesNames","builtInSocketTemplates","concat","installedTemplates","map","templateName","templateSpec","name","description","templateLongDesc","getTemplatesChoices","socketTemplate","format","grey","searchForSockets","socketsPath","maxDepth","fs","existsSync","sockets","options","walkdir","sync","walkPath","stat","match","path","dirname","socket","YAML","load","readFileSync","push","findLocalPath","socketName","socketPath","projectPath","session","process","cwd","socketInCurrentPath","join","forEach","file","nodeModPath","listLocal","singleSocketPath","singleSocket","localPath","localSockets","nodeModSockets","getOrigFilePath","origFileLine","origFilePath","source","replace","deleteFolderRecursive","folder","readdirSync","index","curPath","lstatSync","isDirectory","unlinkSync","rmdirSync"],"mappings":"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","file":"utils.js","sourcesContent":["import fs from 'fs'\nimport YAML from 'js-yaml'\nimport path from 'path'\nimport format from 'chalk'\nimport walkdir from 'walkdir'\n\nimport logger from '../debug'\nimport session from '../session'\nimport { getTemplateSpec, builtInSocketTemplates, installedSocketTemplates } from '../templates'\n\nconst { debug } = logger('utils-sockets-utils')\n\nconst socketTemplates = () => {\n  const installedTemplatesNames = installedSocketTemplates()\n  const allTemplatesNames = builtInSocketTemplates.concat(installedTemplatesNames)\n\n  const installedTemplates = allTemplatesNames.map(templateName => {\n    debug('loading template:', templateName)\n    const templateSpec = getTemplateSpec(templateName)\n\n    return { name: templateName, description: templateSpec.templateLongDesc }\n  })\n  return installedTemplates\n}\n\nconst getTemplatesChoices = () => socketTemplates().map(socketTemplate =>\n  `${socketTemplate.description} - ${format.grey(`(${socketTemplate.name})`)}`)\n\nconst searchForSockets = (socketsPath, maxDepth = 3) => {\n  if (!fs.existsSync(socketsPath)) {\n    return []\n  }\n  const sockets = []\n\n  const options = {\n    'follow_symlinks': true,\n    'max_depth': maxDepth\n  }\n\n  // TODO: optimize only diging deeper scoped modues\n  walkdir.sync(socketsPath, options, (walkPath, stat) => {\n    if (walkPath.match(/socket.yml$/) && !path.dirname(walkPath).match(/\\/\\./)) {\n      const socket = YAML.load(fs.readFileSync(walkPath, 'utf8')) || {}\n      sockets.push([walkPath, socket])\n    }\n  })\n\n  return sockets\n}\n\nconst findLocalPath = (socketName) => {\n  debug('findLocalPath')\n  let socketPath = null\n  const projectPath = session.projectPath || process.cwd()\n\n  if (!fs.existsSync(projectPath)) {\n    return socketPath\n  }\n\n  const socketInCurrentPath = path.join(projectPath, 'socket.yml')\n  if (fs.existsSync(socketInCurrentPath)) {\n    const socket = YAML.load(fs.readFileSync(socketInCurrentPath, 'utf8')) || {}\n    if (socket.name === socketName) {\n      return path.dirname(socketInCurrentPath)\n    }\n  }\n\n  // Search for syncano folder\n  const socketsPath = path.join(session.projectPath, 'syncano')\n  searchForSockets(socketsPath).forEach(([file, socket]) => {\n    if (socket.name === socketName) {\n      socketPath = path.dirname(file)\n    }\n  })\n\n  if (!socketPath) {\n    const nodeModPath = path.join(session.projectPath, 'node_modules')\n    searchForSockets(nodeModPath).forEach(([file, socket]) => {\n      if (socket.name === socketName) {\n        socketPath = path.dirname(file)\n      }\n    })\n  }\n\n  return socketPath\n}\n\n// Listing sockets\n// list sockets based on project path\nconst listLocal = () => {\n  debug('listLocal', session.projectPath)\n\n  const singleSocketPath = path.join(session.projectPath)\n  const singleSocket = searchForSockets(singleSocketPath, 1).map(([file, socket]) => socket.name)\n\n  const localPath = path.join(session.projectPath, 'syncano')\n  const localSockets = searchForSockets(localPath).map(([file, socket]) => socket.name)\n\n  const nodeModPath = path.join(session.projectPath, 'node_modules')\n  const nodeModSockets = searchForSockets(nodeModPath).map(([file, socket]) => socket.name)\n\n  return localSockets.concat(singleSocket, nodeModSockets)\n}\n\nconst getOrigFilePath = (origFileLine) => {\n  let origFilePath = origFileLine.source.match(/webpack:\\/\\/\\/(.*\\.js)(\\?|$)/)[1]\n\n  if (origFilePath.match(/~\\//)) {\n    origFilePath = origFilePath.replace('~', 'node_modules')\n  }\n  return origFilePath\n}\n\nconst deleteFolderRecursive = (folder) => {\n  if (fs.existsSync(folder)) {\n    fs.readdirSync(folder).forEach((file, index) => {\n      const curPath = path.join(folder, file)\n      if (fs.lstatSync(curPath).isDirectory()) { // recurse\n        deleteFolderRecursive(curPath)\n      } else {\n        fs.unlinkSync(curPath)\n      }\n    })\n    fs.rmdirSync(folder)\n  }\n}\n\nexport default {\n  deleteFolderRecursive,\n  getTemplatesChoices,\n  findLocalPath,\n  listLocal,\n  getOrigFilePath\n}\n"]}