'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _backups = require('./helpers/backups');

var _printTools = require('../utils/print-tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class BackupsList {
  constructor(context) {
    this.session = context.session;
    this.Backups = context.session.connection.backups;
  }

  run() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        const backup = yield _this.Backups.list();
        if (backup.length) {
          backup.forEach(function (elem) {
            return _this.printBackups(elem);
          });
        } else {
          (0, _backups.printNoBackupsInfo)();
          (0, _printTools.echo)();
        }
      } catch (err) {
        (0, _printTools.error)(err.message);
        process.exit(1);
      }
    })();
  }

  printBackups({ id, instance, author, created_at: createAt, updated_at: updatedAt, details }) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      (0, _printTools.echo)(4)(`        ${_chalk2.default.dim('id')}: ${_chalk2.default.cyan.bold(id)}`);
      (0, _printTools.echo)(4)(`  ${_chalk2.default.dim('instance')}: ${instance}`);
      (0, _printTools.echo)(4)(`    ${_chalk2.default.dim('author')}: ${author.email}`);
      (0, _printTools.echo)(4)(`${_chalk2.default.dim('created at')}: ${_this2.dateParser(createAt)}`);
      (0, _printTools.echo)(4)(`${_chalk2.default.dim('updated at')}: ${_this2.dateParser(updatedAt)}`);
      (0, _printTools.echo)(4)(`   ${_chalk2.default.dim('details')}:`);
      (0, _printTools.echo)(8)(`  ${_chalk2.default.dim('class')}: ${details.class.count}`);
      (0, _printTools.echo)(8)(` ${_chalk2.default.dim('socket')}: ${details.socket.count}`);
      (0, _printTools.echo)(8)(`${_chalk2.default.dim('hosting')}: ${details.hosting.count}`);
      (0, _printTools.echo)();
    })();
  }

  dateParser(time) {
    return new Date(time).toLocaleString();
  }
}

exports.default = BackupsList;
module.exports = exports['default'];
//# sourceMappingURL=backups-list.js.map