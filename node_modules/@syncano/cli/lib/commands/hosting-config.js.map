{"version":3,"sources":["../../src/commands/hosting-config.js"],"names":["HostingConfig","constructor","context","hosting","toggleBrowserRouter","command","responses","browser_router","run","hostingName","cmd","cname","fullPath","Hosting","get","existLocally","process","exit","removeCname","hasCNAME","browserRouter","inquirer","prompt","getQuestions","paramsToUpdate","CNAME","removeCNAME","configure","format","green","HostingListCmd","printHosting","err","response","data","detail","message","questions","push","name","default","getCNAME","type","config"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,MAAMA,aAAN,CAAoB;AAClBC,cAAaC,OAAb,EAAsB;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;AAED,SAAOC,mBAAP,CAA4BC,OAA5B,EAAqCC,SAArC,EAAgD;AAC9C,QAAIA,UAAUC,cAAd,EAA8B;AAC5B,aAAOD,UAAUC,cAAjB;AACD;AACD,WAAOF,YAAY,MAAnB;AACD;;AAEKG,KAAN,CAAW,CAACC,WAAD,EAAcC,GAAd,CAAX,EAA+B;AAAA;;AAAA;AAC7B,YAAKC,KAAL,GAAaD,IAAIC,KAAjB;AACA,YAAKC,QAAL,GAAgB,IAAhB;;AAEA,UAAI;AACF,cAAKT,OAAL,GAAe,MAAMU,kBAAQC,GAAR,CAAYL,WAAZ,CAArB;;AAEA,YAAI,CAAC,MAAKN,OAAL,CAAaY,YAAlB,EAAgC;AAC9B,mCAAQ,CAAR,EAAW,kBAAX;AACA;AACAC,kBAAQC,IAAR,CAAa,CAAb;AACD;AACD,YAAIP,IAAIQ,WAAJ,IAAmB,CAAC,MAAKf,OAAL,CAAagB,QAAb,CAAsBT,IAAIQ,WAA1B,CAAxB,EAAgE;AAC9D,mCAAQ,CAAR,EAAW,wCAAX;AACA;AACAF,kBAAQC,IAAR,CAAa,CAAb;AACD;;AAED,YAAIX,YAAY,EAAhB;AACA,YAAI,EAAEI,IAAIQ,WAAJ,IAAmBR,IAAIC,KAAvB,IAAgCD,IAAIU,aAAtC,CAAJ,EAA0D;AACxDd,sBAAY,OAAMe,mBAASC,MAAT,CAAgB,MAAKC,YAAL,EAAhB,CAAN,KAA8C,EAA1D;AACD;;AAED,cAAMC,iBAAiB;AACrBb,iBAAO,MAAKA,KAAL,IAAcL,UAAUmB,KADV;AAErBC,uBAAahB,IAAIQ,WAFI;AAGrBX,0BAAgBP,cAAcI,mBAAd,CAAkCM,IAAIU,aAAtC,EAAqDd,SAArD;AAHK,SAAvB;;AAMA,cAAM,MAAKH,OAAL,CAAawB,SAAb,CAAuBH,cAAvB,CAAN;;AAEA;AACA,8BAAK,CAAL,EAAQI,gBAAOC,KAAP,CAAa,qCAAb,CAAR;AACA;AACAC,8BAAeC,YAAf,CAA4B,MAAK5B,OAAjC;AACA;AACD,OAhCD,CAgCE,OAAO6B,GAAP,EAAY;AACZ,YAAIA,IAAIC,QAAJ,IAAgBD,IAAIC,QAAJ,CAAaC,IAA7B,IAAqCF,IAAIC,QAAJ,CAAaC,IAAb,CAAkBC,MAA3D,EAAmE;AACjE,iCAAM,CAAN,EAASH,IAAIC,QAAJ,CAAaC,IAAb,CAAkBC,MAA3B;AACD,SAFD,MAEO;AACL,iCAAM,CAAN,EAASH,IAAII,OAAb;AACD;AACD;AACD;AA3C4B;AA4C9B;;AAEDb,iBAAgB;AACd,UAAMc,YAAY,EAAlB;;AAEA,QAAI,CAAC,KAAK1B,KAAV,EAAiB;AACf0B,gBAAUC,IAAV,CAAe;AACbC,cAAM,OADO;AAEbH,iBAAS,mBAAE,CAAF,EAAK,mDAAL,CAFI;AAGbI,iBAAS,KAAKrC,OAAL,CAAasC,QAAb;AAHI,OAAf;AAKD;AACD,QAAI,CAAC,KAAKlC,cAAV,EAA0B;AACxB8B,gBAAUC,IAAV,CAAe;AACbI,cAAM,SADO;AAEbH,cAAM,gBAFO;AAGbH,iBAAS,mBAAE,CAAF,EAAK,oDAAL,CAHI;AAIbI,iBAAS,KAAKrC,OAAL,CAAawC,MAAb,CAAoBpC;AAJhB,OAAf;AAMD;;AAED,WAAO8B,SAAP;AACD;AA/EiB;;kBAkFLrC,a","file":"hosting-config.js","sourcesContent":["import format from 'chalk'\nimport inquirer from 'inquirer'\nimport { p, echo, error, warning } from '../utils/print-tools'\nimport Hosting from '../utils/hosting'\nimport HostingListCmd from './hosting-list'\n\nclass HostingConfig {\n  constructor (context) {\n    this.context = context\n    this.hosting = null\n  }\n\n  static toggleBrowserRouter (command, responses) {\n    if (responses.browser_router) {\n      return responses.browser_router\n    }\n    return command === 'true'\n  }\n\n  async run ([hostingName, cmd]) {\n    this.cname = cmd.cname\n    this.fullPath = null\n\n    try {\n      this.hosting = await Hosting.get(hostingName)\n\n      if (!this.hosting.existLocally) {\n        warning(4)('No such hosting!')\n        echo()\n        process.exit(1)\n      }\n      if (cmd.removeCname && !this.hosting.hasCNAME(cmd.removeCname)) {\n        warning(4)('This hosting doesn\\'t have such CNAME!')\n        echo()\n        process.exit(1)\n      }\n\n      let responses = {}\n      if (!(cmd.removeCname || cmd.cname || cmd.browserRouter)) {\n        responses = await inquirer.prompt(this.getQuestions()) || {}\n      }\n\n      const paramsToUpdate = {\n        cname: this.cname || responses.CNAME,\n        removeCNAME: cmd.removeCname,\n        browser_router: HostingConfig.toggleBrowserRouter(cmd.browserRouter, responses)\n      }\n\n      await this.hosting.configure(paramsToUpdate)\n\n      echo()\n      echo(4)(format.green('Configuration successfully updated!'))\n      echo()\n      HostingListCmd.printHosting(this.hosting)\n      echo()\n    } catch (err) {\n      if (err.response && err.response.data && err.response.data.detail) {\n        error(4)(err.response.data.detail)\n      } else {\n        error(4)(err.message)\n      }\n      echo()\n    }\n  }\n\n  getQuestions () {\n    const questions = []\n\n    if (!this.cname) {\n      questions.push({\n        name: 'CNAME',\n        message: p(2)('Set CNAME now (your own domain) or leave it empty'),\n        default: this.hosting.getCNAME()\n      })\n    }\n    if (!this.browser_router) {\n      questions.push({\n        type: 'confirm',\n        name: 'browser_router',\n        message: p(2)('Do you want to use BrowserRouter for this hosting?'),\n        default: this.hosting.config.browser_router\n      })\n    }\n\n    return questions\n  }\n}\n\nexport default HostingConfig\n"]}