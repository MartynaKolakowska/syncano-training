{"version":3,"sources":["../../src/commands/backups-list.js"],"names":["BackupsList","constructor","context","session","Backups","connection","backups","run","backup","list","length","forEach","printBackups","elem","err","message","process","exit","id","instance","author","created_at","createAt","updated_at","updatedAt","details","format","dim","cyan","bold","email","dateParser","class","count","socket","hosting","time","Date","toLocaleString"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,WAAN,CAAkB;AAChBC,cAAaC,OAAb,EAAsB;AACpB,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,OAAL,GAAeF,QAAQC,OAAR,CAAgBE,UAAhB,CAA2BC,OAA1C;AACD;;AAEKC,KAAN,GAAa;AAAA;;AAAA;AACX,UAAI;AACF,cAAMC,SAAS,MAAM,MAAKJ,OAAL,CAAaK,IAAb,EAArB;AACA,YAAID,OAAOE,MAAX,EAAmB;AACjBF,iBAAOG,OAAP,CAAe;AAAA,mBAAQ,MAAKC,YAAL,CAAkBC,IAAlB,CAAR;AAAA,WAAf;AACD,SAFD,MAEO;AACL;AACA;AACD;AACF,OARD,CAQE,OAAOC,GAAP,EAAY;AACZ,+BAAMA,IAAIC,OAAV;AACAC,gBAAQC,IAAR,CAAa,CAAb;AACD;AAZU;AAaZ;;AAEKL,cAAN,CAAoB,EAACM,EAAD,EAAKC,QAAL,EAAeC,MAAf,EAAuBC,YAAYC,QAAnC,EAA6CC,YAAYC,SAAzD,EAAoEC,OAApE,EAApB,EAAkG;AAAA;;AAAA;AAChG,4BAAK,CAAL,EAAS,WAAUC,gBAAOC,GAAP,CAAW,IAAX,CAAiB,KAAID,gBAAOE,IAAP,CAAYC,IAAZ,CAAiBX,EAAjB,CAAqB,EAA7D;AACA,4BAAK,CAAL,EAAS,KAAIQ,gBAAOC,GAAP,CAAW,UAAX,CAAuB,KAAIR,QAAS,EAAjD;AACA,4BAAK,CAAL,EAAS,OAAMO,gBAAOC,GAAP,CAAW,QAAX,CAAqB,KAAIP,OAAOU,KAAM,EAArD;AACA,4BAAK,CAAL,EAAS,GAAEJ,gBAAOC,GAAP,CAAW,YAAX,CAAyB,KAAI,OAAKI,UAAL,CAAgBT,QAAhB,CAA0B,EAAlE;AACA,4BAAK,CAAL,EAAS,GAAEI,gBAAOC,GAAP,CAAW,YAAX,CAAyB,KAAI,OAAKI,UAAL,CAAgBP,SAAhB,CAA2B,EAAnE;AACA,4BAAK,CAAL,EAAS,MAAKE,gBAAOC,GAAP,CAAW,SAAX,CAAsB,GAApC;AACA,4BAAK,CAAL,EAAS,KAAID,gBAAOC,GAAP,CAAW,OAAX,CAAoB,KAAIF,QAAQO,KAAR,CAAcC,KAAM,EAAzD;AACA,4BAAK,CAAL,EAAS,IAAGP,gBAAOC,GAAP,CAAW,QAAX,CAAqB,KAAIF,QAAQS,MAAR,CAAeD,KAAM,EAA1D;AACA,4BAAK,CAAL,EAAS,GAAEP,gBAAOC,GAAP,CAAW,SAAX,CAAsB,KAAIF,QAAQU,OAAR,CAAgBF,KAAM,EAA3D;AACA;AAVgG;AAWjG;;AAEDF,aAAYK,IAAZ,EAAkB;AAChB,WAAO,IAAIC,IAAJ,CAASD,IAAT,EAAeE,cAAf,EAAP;AACD;AApCe;;kBAuCHtC,W","file":"backups-list.js","sourcesContent":["import format from 'chalk'\nimport { printNoBackupsInfo } from './helpers/backups'\nimport { echo, error } from '../utils/print-tools'\n\nclass BackupsList {\n  constructor (context) {\n    this.session = context.session\n    this.Backups = context.session.connection.backups\n  }\n\n  async run () {\n    try {\n      const backup = await this.Backups.list()\n      if (backup.length) {\n        backup.forEach(elem => this.printBackups(elem))\n      } else {\n        printNoBackupsInfo()\n        echo()\n      }\n    } catch (err) {\n      error(err.message)\n      process.exit(1)\n    }\n  }\n\n  async printBackups ({id, instance, author, created_at: createAt, updated_at: updatedAt, details}) {\n    echo(4)(`        ${format.dim('id')}: ${format.cyan.bold(id)}`)\n    echo(4)(`  ${format.dim('instance')}: ${instance}`)\n    echo(4)(`    ${format.dim('author')}: ${author.email}`)\n    echo(4)(`${format.dim('created at')}: ${this.dateParser(createAt)}`)\n    echo(4)(`${format.dim('updated at')}: ${this.dateParser(updatedAt)}`)\n    echo(4)(`   ${format.dim('details')}:`)\n    echo(8)(`  ${format.dim('class')}: ${details.class.count}`)\n    echo(8)(` ${format.dim('socket')}: ${details.socket.count}`)\n    echo(8)(`${format.dim('hosting')}: ${details.hosting.count}`)\n    echo()\n  }\n\n  dateParser (time) {\n    return new Date(time).toLocaleString()\n  }\n}\n\nexport default BackupsList\n"]}