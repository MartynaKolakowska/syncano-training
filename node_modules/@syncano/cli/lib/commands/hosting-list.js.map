{"version":3,"sources":["../../src/commands/hosting-list.js"],"names":["HostingListCmd","constructor","context","session","run","cmd","hostings","Hosting","list","printHostings","printNoHostingsInfo","format","cyan","length","process","exit","forEach","printHosting","bind","hosting","cname","getCnameURL","dim","name","src","existRemotely","getURL","config","browser_router","green","red","magenta","isUpToDate","error","errorResponses"],"mappings":"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","file":"hosting-list.js","sourcesContent":["import format from 'chalk'\n\nimport { echo, echon } from '../utils/print-tools'\nimport Hosting from '../utils/hosting'\n\nclass HostingListCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n  }\n\n  async run ([cmd]) {\n    this.cmd = cmd\n    const hostings = await Hosting.list()\n    HostingListCmd.printHostings(hostings)\n  }\n\n  static printNoHostingsInfo () {\n    echo()\n    echo(4)('You don\\'t have any hostings!')\n    echo(4)(`Type ${format.cyan('npx s hosting add')} to add hosting for your app!`)\n    echo()\n  }\n\n  static printHostings (hostings = []) {\n    if (!hostings.length) {\n      HostingListCmd.printNoHostingsInfo()\n      process.exit(0)\n    }\n    echo()\n    echo(4)('Your hostings:')\n    echo()\n    hostings.forEach(HostingListCmd.printHosting.bind(this))\n  }\n\n  static printHosting (hosting) {\n    const cname = typeof hosting.getCnameURL === 'function' && hosting.getCnameURL()\n    echo(11)(`${format.dim('name')}: ${format.cyan(hosting.name)}`)\n\n    echon(2)(`   ${format.dim('local path')}:`)\n    echo(` ${format.cyan(hosting.src)}`)\n\n    if (hosting.existRemotely) {\n      echo(12)(`${format.dim('URL')}: ${format.cyan(hosting.getURL())}`)\n    }\n\n    if (hosting.getCnameURL()) {\n      echo(10)(`${format.dim('CNAME')}: ${format.cyan(cname)}`)\n    }\n\n    echon(2)(`${format.dim('BrowserRouter')}:`)\n    echo(` ${format.cyan(hosting.config.browser_router ? format.green('✓') : format.red('x'))}`)\n\n    if (!hosting.existRemotely) {\n      echo(9)(`${format.dim('status')}: ${format.magenta('not synced')}`)\n    } else {\n      echo(4)(`${format.dim('sync status')}: ${hosting.isUpToDate ? `${format.green('✓')}` : `${format.red('x')}`}`)\n    }\n\n    if (hosting.error) {\n      const errorResponses = {\n        404: `Type ${format.green(`npx s hosting sync ${hosting.name}`)} to sync your hosting with server.`\n      }\n\n      echo()\n      echo(4)(errorResponses[hosting.error])\n    }\n    echo()\n  }\n}\n\nexport default HostingListCmd\n"]}