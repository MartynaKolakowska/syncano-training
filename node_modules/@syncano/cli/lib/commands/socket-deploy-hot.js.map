{"version":3,"sources":["../../src/commands/socket-deploy-hot.js"],"names":["debug","pendingUpdates","timer","Timer","SocketDeployCmd","constructor","context","session","Socket","firstRun","mainSpinner","GlobalSpinner","format","grey","run","socketName","cmd","dim","msg","magenta","spinner","SimpleSpinner","start","socketList","list","socket","_","find","name","stop","existLocally","cyan","process","exit","configs","Promise","each","socketFromList","getConfigOptionsToAsk","then","config","deployProject","projectUpdateStatus","all","map","deploySocket","runStalker","queueSize","length","trace","traces","SocketTraceCmd","startCollectingTraces","catch","err","response","data","detail","reset","status","duration","getDuration","deployTimer","updateEnds","updateEnv","updateStatus","update","printUpdateSuccessful","CompileError","red","traceback","split","line","join","message","bail","deployComponent","component","componentName","packageName","build","getSocketToUpdate","fileName","match","localSockets","isSocketFile","getComponentToUpdate","sockets","listLocal","componentsList","components","getLocal","getComponents","forEach","push","componentFound","some","isComponentFile","projectPath","stalker","watchr","create","on","changeType","socketToUpdate","componentToUpdate","setConfig","interval","persistent","catchupDelay","preferredMethods","followLinks","ignoreHiddenFiles","ignoreCommonPatterns","watch","filter","socketNameStr","errDetail","error","printUpdateFailed","JSON","parse"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,mBAAP,CAAlB;;AAEA,MAAMC,iBAAiB,EAAvB;AACA,MAAMC,QAAQ,IAAIC,gBAAJ,EAAd;;AAEe,MAAMC,eAAN,CAAsB;AACnCC,cAAaC,OAAb,EAAsB;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,MAAL,GAAcF,QAAQE,MAAtB;AACA,SAAKC,QAAL,GAAgB,EAAhB;;AAEA,SAAKC,WAAL,GAAmB,IAAIC,sBAAJ,CAAkB,mBAAE,CAAF,EAAM,GAAEC,gBAAOC,IAAP,CAAY,YAAZ,CAA0B,EAAlC,CAAlB,CAAnB;AACD;;AAEKC,KAAN,CAAW,CAACC,UAAD,EAAaC,GAAb,CAAX,EAA8B;AAAA;;AAAA;AAC5B,YAAKA,GAAL,GAAWA,GAAX;;AAEA,4BAAK,CAAL,EAAS,MAAKJ,gBAAOC,IAAP,CAAY,qBAAZ,CAAmC,IAAGD,gBAAOK,GAAP,CAAW,sBAAX,CAAmC,EAAvF;AACA;;AAEA,UAAIF,UAAJ,EAAgB;AACdf,cAAO,qBAAoBe,UAAW,EAAtC;AACA,cAAMG,MAAM,mBAAE,CAAF,EAAM,GAAEN,gBAAOO,OAAP,CAAe,kBAAf,CAAmC,IAAG,6BAAc,EAA5D,CAAZ;AACA,cAAMC,UAAU,IAAIC,sBAAJ,CAAkBH,GAAlB,EAAuBI,KAAvB,EAAhB;AACA,cAAKC,UAAL,GAAkB,MAAM,MAAKf,MAAL,CAAYgB,IAAZ,CAAiBT,UAAjB,CAAxB;AACA,cAAMU,SAASC,iBAAEC,IAAF,CAAO,MAAKJ,UAAZ,EAAwB,EAAEK,MAAMb,UAAR,EAAxB,CAAf;AACAK,gBAAQS,IAAR;;AAEA,YAAI,CAAEJ,OAAOK,YAAb,EAA4B;AAC1B;AACA,iCAAM,CAAN,EAAU,UAASlB,gBAAOmB,IAAP,CAAYhB,UAAZ,CAAwB,mBAA3C;AACA;AACAiB,kBAAQC,IAAR,CAAa,CAAb;AACD;AACF,OAdD,MAcO;AACL,cAAMf,MAAM,mBAAE,CAAF,EAAM,GAAEN,gBAAOO,OAAP,CAAe,kBAAf,CAAmC,IAAG,6BAAc,EAA5D,CAAZ;AACA,cAAMC,UAAU,IAAIC,sBAAJ,CAAkBH,GAAlB,EAAuBI,KAAvB,EAAhB;AACA,cAAKC,UAAL,GAAkB,MAAM,MAAKf,MAAL,CAAYgB,IAAZ,EAAxB;AACAJ,gBAAQS,IAAR;AACD;;AAED,YAAMK,UAAU,EAAhB;;AAEAC,yBAAQC,IAAR,CAAa,MAAKb,UAAlB,EAA8B,UAACc,cAAD;AAAA,eAAoB,0BAAaA,eAAeC,qBAAf,EAAb,EAC/CC,IAD+C,CAC1C,UAACC,MAAD,EAAY;AAChBN,kBAAQG,eAAeT,IAAvB,IAA+BY,MAA/B;AACD,SAH+C,CAApB;AAAA,OAA9B,EAIGD,IAJH,CAIQ;AAAA,eAAM,MAAKE,aAAL,EAAN;AAAA,OAJR,EAKGF,IALH,CAKQ,UAACG,mBAAD;AAAA,eACJP,mBAAQQ,GAAR,CAAY,MAAKpB,UAAL,CAAgBqB,GAAhB,CAAoB,UAACnB,MAAD;AAAA,iBAAY,MAAKoB,YAAL,CAAkBpB,MAAlB,EAA0BS,QAAQT,OAAOG,IAAf,CAA1B,CAAZ;AAAA,SAApB,CAAZ,CADI;AAAA,OALR,EAQGW,IARH,CAQQ,YAAM;AACVvC,cAAM,kBAAN;AACA,cAAK8C,UAAL;AACA,cAAKpC,WAAL,CAAiBqC,SAAjB,IAA8B,CAA9B;AACA,cAAKrC,WAAL,CAAiBqC,SAAjB,IAA8B,MAAKxB,UAAL,CAAgByB,MAA9C;AACA,cAAKtC,WAAL,CAAiBY,KAAjB;;AAEA,YAAIN,IAAIiC,KAAR,EAAe;AACb,gBAAMC,SAAS,IAAIC,qBAAJ,CAAmB,MAAK7C,OAAxB,EAAiC,MAAKI,WAAtC,CAAf;AACAyB,6BAAQQ,GAAR,CAAY,MAAKpB,UAAL,CAAgBqB,GAAhB,CAAoB,UAACnB,MAAD;AAAA,mBAAYyB,OAAOE,qBAAP,CAA6B3B,MAA7B,CAAZ;AAAA,WAApB,CAAZ;AACD;AACF,OAnBH,EAoBG4B,KApBH,CAoBS,UAACC,GAAD,EAAS;AACd,YAAIA,IAAIC,QAAJ,IAAgBD,IAAIC,QAAJ,CAAaC,IAA7B,IAAqCF,IAAIC,QAAJ,CAAaC,IAAb,CAAkBC,MAA3D,EAAmE;AACjE,iCAAM,CAAN,EAASH,IAAIC,QAAJ,CAAaC,IAAb,CAAkBC,MAA3B;AACD,SAFD,MAEO;AACL,iCAAM,CAAN,EAASH,GAAT;AACD;AACF,OA1BH;AA7B4B;AAwD7B;;AAEKb,eAAN,GAAuB;AAAA;;AAAA;AACrBvC,YAAMwD,KAAN;AACA,YAAMxC,MAAM,mBAAE,CAAF,EAAM,GAAEN,gBAAOO,OAAP,CAAe,iBAAf,CAAkC,IAAG,6BAAc,EAA3D,CAAZ;AACA,YAAMC,UAAU,IAAIC,sBAAJ,CAAkBH,GAAlB,EAAuBI,KAAvB,EAAhB;AACA,YAAM,OAAKf,OAAL,CAAakC,aAAb,EAAN;AACArB,cAAQS,IAAR;AACA,YAAM8B,SAAS/C,gBAAOC,IAAP,CAAY,iBAAZ,CAAf;AACA,YAAM+C,WAAW1D,MAAM2D,WAAN,EAAjB;AACA,4BAAK,CAAL,EAAS,GAAEF,MAAO,IAAG,6BAAc,IAAGC,QAAS,EAA/C;AARqB;AAStB;;AAEKf,cAAN,CAAoBpB,MAApB,EAA4Be,MAA5B,EAAoC;AAAA;;AAAA;AAClCxC,YAAO,iBAAgByB,OAAOG,IAAK,EAAnC;AACA,YAAMkC,cAAc,IAAI3D,gBAAJ,EAApB;AACA,YAAMe,MAAM,mBAAE,CAAF,EAAM,GAAEN,gBAAOO,OAAP,CAAe,gBAAf,CAAiC,IAAG,6BAAc,IAAGP,gBAAOmB,IAAP,CAAYN,OAAOG,IAAnB,CAAyB,EAAtF,CAAZ;AACA,aAAKlB,WAAL,CAAiBmB,IAAjB;AACA,YAAMT,UAAU,IAAIC,sBAAJ,CAAkBH,GAAlB,EAAuBI,KAAvB,EAAhB;;AAEA;AACA,UAAI,CAACrB,eAAewB,OAAOG,IAAtB,CAAL,EAAkC;AAAE3B,uBAAewB,OAAOG,IAAtB,IAA8B,CAA9B;AAAiC;;AAErE3B,qBAAewB,OAAOG,IAAtB,KAA+B,CAA/B;AACA,UAAI3B,eAAewB,OAAOG,IAAtB,IAA8B,CAAlC,EAAqC;AACnCR,gBAAQS,IAAR;AACA,eAAKnB,WAAL,CAAiBY,KAAjB;AACAtB,cAAO,iCAAgCC,eAAewB,OAAOG,IAAtB,CAA4B,EAAnE;AACA;AACD;;AAED,YAAMmC;AAAA,qCAAa,aAAY;AAC7B,iBAAKrD,WAAL,CAAiBY,KAAjB;AACA;AACArB,yBAAewB,OAAOG,IAAtB,KAA+B,CAA/B;AACA,cAAI3B,eAAewB,OAAOG,IAAtB,IAA8B,CAAlC,EAAqC;AACnC3B,2BAAewB,OAAOG,IAAtB,IAA8B,CAA9B;AACA,kBAAM,OAAKiB,YAAL,CAAkBpB,MAAlB,EAA0Be,MAA1B,CAAN;AACD;AACF,SARK;;AAAA;AAAA;AAAA;AAAA,UAAN;;AAUA,UAAI;AACF,cAAMwB,YAAY,CAAE,OAAKvD,QAAL,CAAcgB,OAAOG,IAArB,CAApB;AACA,cAAMqC,eAAe,MAAMxC,OAAOyC,MAAP,CAAc,EAAE1B,MAAF,EAAUwB,SAAV,EAAd,CAA3B;;AAEA5C,gBAAQS,IAAR;AACAzB,wBAAgB+D,qBAAhB,CAAsC1C,OAAOG,IAA7C,EAAmDqC,YAAnD,EAAiEH,WAAjE;AACA,cAAMC,YAAN;AACA,eAAKtD,QAAL,CAAcgB,OAAOG,IAArB,IAA6B,IAA7B;AACD,OARD,CAQE,OAAO0B,GAAP,EAAY;AACZtD,cAAMsD,GAAN;AACAlC,gBAAQS,IAAR;AACA,YAAIyB,eAAec,oBAAnB,EAAiC;AAC/B,gBAAMT,SAAS/C,gBAAOyD,GAAP,CAAW,oBAAX,CAAf;AACA,gCAAK,CAAL,EAAS,GAAEV,MAAO,IAAG,6BAAc,IAAG/C,gBAAOmB,IAAP,CAAYN,OAAOG,IAAnB,CAAyB,OAAM0B,IAAIgB,SAAJ,CAAcC,KAAd,CAAoB,IAApB,EAA0B3B,GAA1B,CAA8B;AAAA,mBAAQ,mBAAE,CAAF,EAAK4B,IAAL,CAAR;AAAA,WAA9B,EAAkDC,IAAlD,CAAuD,IAAvD,CAA6D,EAAlI;AACD,SAHD,MAGO;AACL,gBAAMd,SAAS/C,gBAAOyD,GAAP,CAAW,oBAAX,CAAf;AACA,gCAAK,CAAL,EAAS,GAAEV,MAAO,IAAG,6BAAc,IAAG/C,gBAAOmB,IAAP,CAAYN,OAAOG,IAAnB,CAAyB,IAAGhB,gBAAOyD,GAAP,CAAWf,IAAIoB,OAAf,CAAwB,EAA1F;AACD;;AAED,YAAI,OAAK1D,GAAL,CAAS2D,IAAb,EAAmB;AACjBvE,0BAAgBuE,IAAhB;AACD;AACDZ;AACD;AAnDiC;AAoDnC;;AAEKa,iBAAN,CAAuBC,SAAvB,EAAkC;AAAA;;AAAA;AAChC,YAAMC,gBAAgBD,UAAUE,WAAhC;AACA/E,YAAO,oBAAmB8E,aAAc,EAAxC;AACA,YAAMhB,cAAc,IAAI3D,gBAAJ,EAApB;AACA,YAAMe,MAAM,mBAAG,GAAEN,gBAAOO,OAAP,CAAe,kBAAf,CAAmC,IAAG,6BAAc,IAAGP,gBAAOmB,IAAP,CAAY+C,aAAZ,CAA2B,EAAvF,CAAZ;AACA,aAAKpE,WAAL,CAAiBmB,IAAjB;AACA,YAAMT,UAAU,IAAIC,sBAAJ,CAAkBH,GAAlB,EAAuBI,KAAvB,EAAhB;;AAEA;AACA,UAAI,CAACrB,eAAe6E,aAAf,CAAL,EAAoC;AAAE7E,uBAAe6E,aAAf,IAAgC,CAAhC;AAAmC;;AAEzE7E,qBAAe6E,aAAf,KAAiC,CAAjC;AACA,UAAI7E,eAAe6E,aAAf,IAAgC,CAApC,EAAuC;AACrC1D,gBAAQS,IAAR;AACA,eAAKnB,WAAL,CAAiBY,KAAjB;AACAtB,cAAO,iCAAgCC,eAAe6E,aAAf,CAA8B,EAArE;AACA;AACD;;AAED,YAAMf;AAAA,sCAAa,aAAY;AAC7B,iBAAKrD,WAAL,CAAiBY,KAAjB;AACA;AACArB,yBAAe6E,aAAf,KAAiC,CAAjC;AACA,cAAI7E,eAAe6E,aAAf,IAAgC,CAApC,EAAuC;AACrC7E,2BAAe6E,aAAf,IAAgC,CAAhC;AACA,kBAAM,OAAKF,eAAL,CAAqBC,SAArB,CAAN;AACD;AACF,SARK;;AAAA;AAAA;AAAA;AAAA,UAAN;;AAUA,UAAI;AACF,cAAMA,UAAUG,KAAV,EAAN;;AAEA5D,gBAAQS,IAAR;AACAzB,wBAAgB+D,qBAAhB,CAAsCW,aAAtC,EAAqD,EAACnB,QAAQ,IAAT,EAArD,EAAqEG,WAArE;AACA,cAAMC,YAAN;AACD,OAND,CAME,OAAOT,GAAP,EAAY;AACZlC,gBAAQS,IAAR;AACA,YAAIyB,eAAec,oBAAnB,EAAiC;AAC/B,gBAAMT,SAAS/C,gBAAOyD,GAAP,CAAW,kBAAX,CAAf;AACA,gCAAK,CAAL,EAAS,GAAEV,MAAO,IAAG,6BAAc,IAAG/C,gBAAOmB,IAAP,CAAY+C,aAAZ,CAA2B,OAAMxB,IAAIgB,SAAJ,CAAcC,KAAd,CAAoB,IAApB,EAA0B3B,GAA1B,CAA8B;AAAA,mBAAQ,mBAAE,CAAF,EAAK4B,IAAL,CAAR;AAAA,WAA9B,EAAkDC,IAAlD,CAAuD,IAAvD,CAA6D,EAApI;AACD,SAHD,MAGO;AACL,gBAAMd,SAAS/C,gBAAOyD,GAAP,CAAW,cAAX,CAAf;AACA,gCAAK,CAAL,EAAS,GAAEV,MAAO,IAAG,6BAAc,IAAG/C,gBAAOmB,IAAP,CAAY+C,aAAZ,CAA2B,IAAGlE,gBAAOyD,GAAP,CAAWf,IAAIoB,OAAf,CAAwB,EAA5F;AACD;;AAED,YAAI,OAAK1D,GAAL,CAAS2D,IAAb,EAAmB;AACjBvE,0BAAgBuE,IAAhB;AACD;AACDZ;AACA3C,gBAAQS,IAAR;AACD;AAlD+B;AAmDjC;;AAEDoD,oBAAmBC,QAAnB,EAA6B;AAC3B,QAAIA,SAASC,KAAT,CAAe,UAAf,KAA8BD,SAASC,KAAT,CAAe,gBAAf,CAAlC,EAAoE;AAClE,aAAO,KAAP;AACD;AACD,WAAO,KAAKC,YAAL,CAAkBzD,IAAlB,CAAwBF,MAAD,IAAYA,OAAO4D,YAAP,CAAoBH,QAApB,CAAnC,CAAP;AACD;;AAEKI,sBAAN,CAA4BJ,QAA5B,EAAsC;AAAA;;AAAA;AACpC,YAAMK,UAAU,MAAM,OAAK/E,MAAL,CAAYgF,SAAZ,EAAtB;AACA,YAAMC,iBAAiB,EAAvB;AACA,YAAMtD,mBAAQQ,GAAR,CAAY4C,QAAQ3C,GAAR;AAAA,sCAAY,WAAMnB,MAAN,EAAgB;AAC5C,gBAAMiE,aAAa,MAAM,OAAKlF,MAAL,CAAYmF,QAAZ,CAAqBlE,MAArB,EAA6BmE,aAA7B,EAAzB;AACAF,qBAAWG,OAAX,CAAmB,qBAAa;AAC9BJ,2BAAeK,IAAf,CAAoBjB,SAApB;AACD,WAFD;AAGD,SALiB;;AAAA;AAAA;AAAA;AAAA,WAAZ,CAAN;AAMA,UAAIkB,iBAAiB,IAArB;AACAN,qBAAeO,IAAf,CAAoB,qBAAa;AAC/B,YAAInB,UAAUoB,eAAV,CAA0Bf,QAA1B,CAAJ,EAAyC;AACvCa,2BAAiBlB,SAAjB;AACD;AACF,OAJD;AAKA,aAAOkB,cAAP;AAfoC;AAgBrC;;AAEDjD,eAAc;AAAA;;AACZ;AACA9C,UAAM,WAAN,EAAmB,KAAKO,OAAL,CAAa2F,WAAhC;AACA,SAAKC,OAAL,GAAeC,iBAAOC,MAAP,CAAc,KAAK9F,OAAL,CAAa2F,WAA3B,CAAf;AACA,SAAKC,OAAL,CAAaG,EAAb,CAAgB,QAAhB;AAAA,oCAA0B,WAAOC,UAAP,EAAmBrB,QAAnB,EAAgC;AACxDhF,cAAMwD,KAAN;AACA,cAAM8C,iBAAiB,OAAKvB,iBAAL,CAAuBC,QAAvB,CAAvB;AACA,cAAMuB,oBAAoB,MAAM,OAAKnB,oBAAL,CAA0BJ,QAA1B,CAAhC;AACA,YAAIuB,iBAAJ,EAAuB;AACrB,iBAAK7B,eAAL,CAAqB6B,iBAArB;AACD,SAFD,MAEO,IAAID,cAAJ,EAAoB;AACzB,iBAAK3D,YAAL,CAAkB2D,cAAlB;AACD;AACF,OATD;;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAKL,OAAL,CAAaO,SAAb,CAAuB;AACrBC,gBAAU,GADW;AAErBC,kBAAY,IAFS;AAGrBC,oBAAc,GAHO;AAIrBC,wBAAkB,CAAC,OAAD,EAAU,WAAV,CAJG;AAKrBC,mBAAa,IALQ;AAMrBC,yBAAmB,IANE,EAMI;AACzBC,4BAAsB;AAPD,KAAvB;;AAUA;AACA,SAAKd,OAAL,CAAae,KAAb,CAAmB,MAAM,CAAE,CAA3B;;AAEA,SAAK9B,YAAL,GAAoB1D,iBAAEyF,MAAF,CAAS,KAAK5F,UAAd,EAA0B,EAAEO,cAAc,IAAhB,EAA1B,CAApB;AACD;;AAED,SAAO6C,IAAP,GAAe;AACb;AACA3C,YAAQC,IAAR,CAAa,CAAb;AACD;;AAED,SAAOkC,qBAAP,CAA8BpD,UAA9B,EAA0CkD,YAA1C,EAAwDH,WAAxD,EAAqE;AACnE9D,UAAM,uBAAN,EAA+Be,UAA/B,EAA2CkD,YAA3C;AACA,UAAML,WAAWhD,gBAAOK,GAAP,CAAW6C,YAAYD,WAAZ,EAAX,CAAjB;AACA,UAAMuD,gBAAiB,GAAExG,gBAAOmB,IAAP,CAAYhB,UAAZ,CAAwB,EAAjD;;AAEA,QAAIkD,aAAaN,MAAb,KAAwB,IAA5B,EAAkC;AAChC,YAAMA,SAAS/C,gBAAOC,IAAP,CAAY,gBAAZ,CAAf;AACA,4BAAK,CAAL,EAAS,GAAE8C,MAAO,IAAG,6BAAc,IAAGyD,aAAc,IAAGxD,QAAS,EAAhE;AACD,KAHD,MAGO,IAAIK,aAAaN,MAAb,KAAwB,SAA5B,EAAuC;AAC5C;AACA;AACD,KAHM,MAGA,IAAIM,aAAaN,MAAb,KAAwB,OAA5B,EAAqC;AAC1C,YAAM0D,YAAYzG,gBAAOyD,GAAP,CAAWJ,aAAaS,OAAb,CAAqB4C,KAAhC,CAAlB;AACA,YAAM3D,SAAS/C,gBAAOyD,GAAP,CAAW,oBAAX,CAAf;AACA,4BAAK,CAAL,EAAS,GAAEV,MAAO,IAAG,6BAAc,IAAGyD,aAAc,IAAGxD,QAAS,IAAGyD,SAAU,EAA7E;AACD,KAJM,MAIA;AACL,YAAM1D,SAAS/C,gBAAOyD,GAAP,CAAW,oBAAX,CAAf;AACA,4BAAK,CAAL,EAAS,GAAEV,MAAO,IAAG,6BAAc,IAAGyD,aAAc,IAAGxD,QAAS,EAAhE;AACD;AACF;;AAED,SAAO2D,iBAAP,CAA0BxG,UAA1B,EAAsCuC,GAAtC,EAA2CQ,WAA3C,EAAwD;AACtD,UAAMF,WAAWE,YAAYD,WAAZ,EAAjB;AACA,UAAMwD,YAAYG,KAAKC,KAAL,CAAWnE,GAAX,EAAgBG,MAAlC;AACA,0BAAK,CAAL,EAAS,GAAE7C,gBAAOyD,GAAP,CAAW,mBAAX,CAAgC,IAAG,6BAAc,IAAGtD,UAAW,IAAG6C,QAAS,IAAGyD,SAAU,EAAnG;AACD;AAhRkC;kBAAhBjH,e","file":"socket-deploy-hot.js","sourcesContent":["import _ from 'lodash'\nimport watchr from 'watchr'\nimport format from 'chalk'\nimport Promise from 'bluebird'\n\nimport logger from '../utils/debug'\nimport { SimpleSpinner, GlobalSpinner } from './helpers/spinner'\nimport { askQuestions } from './helpers/socket'\nimport { p, error, echo } from '../utils/print-tools'\nimport { currentTime, Timer } from '../utils/date-utils'\nimport SocketTraceCmd from './socket-trace'\nimport { CompileError } from '../utils/errors'\n\nconst { debug } = logger('cmd-socket-deploy')\n\nconst pendingUpdates = {}\nconst timer = new Timer()\n\nexport default class SocketDeployCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.firstRun = []\n\n    this.mainSpinner = new GlobalSpinner(p(3)(`${format.grey('waiting...')}`))\n  }\n\n  async run ([socketName, cmd]) {\n    this.cmd = cmd\n\n    echo(2)(`🔥 ${format.grey(' Hot deploy started')} ${format.dim('(Hit Ctrl-C to stop)')}`)\n    echo()\n\n    if (socketName) {\n      debug(`Deploying Socket: ${socketName}`)\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.list(socketName)\n      const socket = _.find(this.socketList, { name: socketName })\n      spinner.stop()\n\n      if (!(socket.existLocally)) {\n        echo()\n        error(4)(`Socket ${format.cyan(socketName)} cannot be found!`)\n        echo()\n        process.exit(1)\n      }\n    } else {\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.list()\n      spinner.stop()\n    }\n\n    const configs = {}\n\n    Promise.each(this.socketList, (socketFromList) => askQuestions(socketFromList.getConfigOptionsToAsk())\n      .then((config) => {\n        configs[socketFromList.name] = config\n      }))\n      .then(() => this.deployProject())\n      .then((projectUpdateStatus) =>\n        Promise.all(this.socketList.map((socket) => this.deploySocket(socket, configs[socket.name])))\n      )\n      .then(() => {\n        debug('Starting stalker')\n        this.runStalker()\n        this.mainSpinner.queueSize += 1\n        this.mainSpinner.queueSize += this.socketList.length\n        this.mainSpinner.start()\n\n        if (cmd.trace) {\n          const traces = new SocketTraceCmd(this.context, this.mainSpinner)\n          Promise.all(this.socketList.map((socket) => traces.startCollectingTraces(socket)))\n        }\n      })\n      .catch((err) => {\n        if (err.response && err.response.data && err.response.data.detail) {\n          error(4)(err.response.data.detail)\n        } else {\n          error(4)(err)\n        }\n      })\n  }\n\n  async deployProject () {\n    timer.reset()\n    const msg = p(4)(`${format.magenta('project deploy:')} ${currentTime()}`)\n    const spinner = new SimpleSpinner(msg).start()\n    await this.session.deployProject()\n    spinner.stop()\n    const status = format.grey('project synced:')\n    const duration = timer.getDuration()\n    echo(5)(`${status} ${currentTime()} ${duration}`)\n  }\n\n  async deploySocket (socket, config) {\n    debug(`deploySocket: ${socket.name}`)\n    const deployTimer = new Timer()\n    const msg = p(4)(`${format.magenta('socket deploy:')} ${currentTime()} ${format.cyan(socket.name)}`)\n    this.mainSpinner.stop()\n    const spinner = new SimpleSpinner(msg).start()\n\n    // We have to count here number of updates\n    if (!pendingUpdates[socket.name]) { pendingUpdates[socket.name] = 0 }\n\n    pendingUpdates[socket.name] += 1\n    if (pendingUpdates[socket.name] > 1) {\n      spinner.stop()\n      this.mainSpinner.start()\n      debug(`not updating, update pending: ${pendingUpdates[socket.name]}`)\n      return\n    }\n\n    const updateEnds = async () => {\n      this.mainSpinner.start()\n      // After update we have to understand if we should fire new one\n      pendingUpdates[socket.name] -= 1\n      if (pendingUpdates[socket.name] > 0) {\n        pendingUpdates[socket.name] = 0\n        await this.deploySocket(socket, config)\n      }\n    }\n\n    try {\n      const updateEnv = !(this.firstRun[socket.name])\n      const updateStatus = await socket.update({ config, updateEnv })\n\n      spinner.stop()\n      SocketDeployCmd.printUpdateSuccessful(socket.name, updateStatus, deployTimer)\n      await updateEnds()\n      this.firstRun[socket.name] = true\n    } catch (err) {\n      debug(err)\n      spinner.stop()\n      if (err instanceof CompileError) {\n        const status = format.red('    compile error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)}\\n\\n${err.traceback.split('\\n').map(line => p(8)(line)).join('\\n')}`)\n      } else {\n        const status = format.red('socket sync error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)} ${format.red(err.message)}`)\n      }\n\n      if (this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n      updateEnds()\n    }\n  }\n\n  async deployComponent (component) {\n    const componentName = component.packageName\n    debug(`deployComponent: ${componentName}`)\n    const deployTimer = new Timer()\n    const msg = p(`${format.magenta('component build:')} ${currentTime()} ${format.cyan(componentName)}`)\n    this.mainSpinner.stop()\n    const spinner = new SimpleSpinner(msg).start()\n\n    // We have to count here number of updates\n    if (!pendingUpdates[componentName]) { pendingUpdates[componentName] = 0 }\n\n    pendingUpdates[componentName] += 1\n    if (pendingUpdates[componentName] > 1) {\n      spinner.stop()\n      this.mainSpinner.start()\n      debug(`not updating, update pending: ${pendingUpdates[componentName]}`)\n      return\n    }\n\n    const updateEnds = async () => {\n      this.mainSpinner.start()\n      // After update we have to understand if we should fire new one\n      pendingUpdates[componentName] -= 1\n      if (pendingUpdates[componentName] > 0) {\n        pendingUpdates[componentName] = 0\n        await this.deployComponent(component)\n      }\n    }\n\n    try {\n      await component.build()\n\n      spinner.stop()\n      SocketDeployCmd.printUpdateSuccessful(componentName, {status: 'ok'}, deployTimer)\n      await updateEnds()\n    } catch (err) {\n      spinner.stop()\n      if (err instanceof CompileError) {\n        const status = format.red('    build error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(componentName)}\\n\\n${err.traceback.split('\\n').map(line => p(8)(line)).join('\\n')}`)\n      } else {\n        const status = format.red('build error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(componentName)} ${format.red(err.message)}`)\n      }\n\n      if (this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n      updateEnds()\n      spinner.stop()\n    }\n  }\n\n  getSocketToUpdate (fileName) {\n    if (fileName.match(/\\/test\\//) || fileName.match(/\\/components\\//)) {\n      return false\n    }\n    return this.localSockets.find((socket) => socket.isSocketFile(fileName))\n  }\n\n  async getComponentToUpdate (fileName) {\n    const sockets = await this.Socket.listLocal()\n    const componentsList = []\n    await Promise.all(sockets.map(async socket => {\n      const components = await this.Socket.getLocal(socket).getComponents()\n      components.forEach(component => {\n        componentsList.push(component)\n      })\n    }))\n    let componentFound = null\n    componentsList.some(component => {\n      if (component.isComponentFile(fileName)) {\n        componentFound = component\n      }\n    })\n    return componentFound\n  }\n\n  runStalker () {\n    // Stalking files\n    debug('watching:', this.session.projectPath)\n    this.stalker = watchr.create(this.session.projectPath)\n    this.stalker.on('change', async (changeType, fileName) => {\n      timer.reset()\n      const socketToUpdate = this.getSocketToUpdate(fileName)\n      const componentToUpdate = await this.getComponentToUpdate(fileName)\n      if (componentToUpdate) {\n        this.deployComponent(componentToUpdate)\n      } else if (socketToUpdate) {\n        this.deploySocket(socketToUpdate)\n      }\n    })\n\n    this.stalker.setConfig({\n      interval: 300,\n      persistent: true,\n      catchupDelay: 300,\n      preferredMethods: ['watch', 'watchFile'],\n      followLinks: true,\n      ignoreHiddenFiles: true, // ignoring .bundles, .dist etc.\n      ignoreCommonPatterns: true\n    })\n\n    // First start of the stalker\n    this.stalker.watch(() => {})\n\n    this.localSockets = _.filter(this.socketList, { existLocally: true })\n  }\n\n  static bail () {\n    echo()\n    process.exit(1)\n  }\n\n  static printUpdateSuccessful (socketName, updateStatus, deployTimer) {\n    debug('printUpdateSuccessful', socketName, updateStatus)\n    const duration = format.dim(deployTimer.getDuration())\n    const socketNameStr = `${format.cyan(socketName)}`\n\n    if (updateStatus.status === 'ok') {\n      const status = format.grey('socket synced:')\n      echo(6)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    } else if (updateStatus.status === 'stopped') {\n      // const status = format.grey('socket in sync:');\n      // echo(5)(`${status} ${currentTime()} ${socketNameStr} ${duration}`);\n    } else if (updateStatus.status === 'error') {\n      const errDetail = format.red(updateStatus.message.error)\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration} ${errDetail}`)\n    } else {\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    }\n  }\n\n  static printUpdateFailed (socketName, err, deployTimer) {\n    const duration = deployTimer.getDuration()\n    const errDetail = JSON.parse(err).detail\n    echo(3)(`${format.red('files not synced:')} ${currentTime()} ${socketName} ${duration} ${errDetail}`)\n  }\n}\n"]}