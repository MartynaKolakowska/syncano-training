{"version":3,"sources":["../../src/commands/socket-deploy.js"],"names":["debug","pendingUpdates","timer","Timer","SocketDeployCmd","constructor","context","session","Socket","init","Init","firstRun","run","socketName","cmd","createInstance","addConfigFiles","instance","format","green","hasProject","msg","magenta","spinner","SimpleSpinner","start","socket","get","stop","existLocally","cyan","process","exit","socketList","list","configs","Promise","each","socketFromList","config","getConfigOptionsToAsk","name","deployProject","index","deploySocket","err","response","data","detail","Array","isArray","forEach","Object","keys","key","reset","status","grey","duration","getDuration","deployTimer","mainSpinner","updateStatus","update","withCompilation","updateSocketNPMDeps","updateEnv","printUpdateSuccessful","bail","CompileError","red","traceback","split","map","line","join","message","getSocketToUpdate","fileName","localSockets","find","isSocketFile","dim","socketNameStr","errDetail","error"],"mappings":"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","file":"socket-deploy.js","sourcesContent":["import format from 'chalk'\nimport Promise from 'bluebird'\n\nimport logger from '../utils/debug'\nimport { SimpleSpinner } from './helpers/spinner'\nimport { createInstance } from './helpers/create-instance'\nimport { askQuestions } from './helpers/socket'\nimport { p, error, echo } from '../utils/print-tools'\nimport { currentTime, Timer } from '../utils/date-utils'\nimport { CompileError } from '../utils/errors'\n\nconst { debug } = logger('cmd-socket-deploy')\n\nconst pendingUpdates = {}\nconst timer = new Timer()\n\nexport default class SocketDeployCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.init = new context.Init()\n    this.firstRun = true\n  }\n\n  async run ([socketName, cmd]) {\n    this.cmd = cmd\n\n    // echo(2)(`♻️ ${format.grey(' Deploying...')}`);\n\n    // Create Instance if --create-instance provided\n    if (cmd.createInstance) {\n      await createInstance(cmd.createInstance)\n      await this.init.addConfigFiles({ instance: cmd.createInstance })\n      echo(4)(`Your project is attached to ${format.green(cmd.createInstance)} instance now!`)\n    } else {\n      // If not, we have to check if we have a project attached to any instance\n      this.session.hasProject()\n    }\n\n    if (socketName) {\n      debug(`Deploying Socket: ${socketName}`)\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      const socket = await this.Socket.get(socketName)\n      spinner.stop()\n\n      if (!socket.existLocally) {\n        echo()\n        error(4)(`Socket ${format.cyan(socketName)} cannot be found!`)\n        echo()\n        process.exit(1)\n      }\n      this.socketList = [socket]\n    } else {\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.list()\n      spinner.stop()\n    }\n\n    const configs = {}\n\n    try {\n      await Promise.each(this.socketList, async (socketFromList) => {\n        const config = await askQuestions(socketFromList.getConfigOptionsToAsk())\n        configs[socketFromList.name] = config\n      })\n      await this.deployProject()\n\n      let index\n      for (index in this.socketList) {\n        const socket = this.socketList[index]\n        await this.deploySocket(socket, configs[socket.name])\n      }\n\n      echo()\n    } catch (err) {\n      if (err.response && err.response.data && err.response.data.detail) {\n        error(4)(err.response.data.detail)\n      } else if (err.response && err.response.data && Array.isArray(err.response.data)) {\n        err.response.data.forEach((msg) => {\n          error(4)(msg)\n        })\n      } else if (err.response && err.response.data && typeof err.response.data === 'object') {\n        Object.keys(err.response.data).forEach(key => {\n          error(4)(`${key}: ${err.response.data[key][0]}`)\n        })\n      } else {\n        error(4)(err)\n      }\n      process.exit(1)\n    }\n  }\n\n  async deployProject () {\n    timer.reset()\n    const msg = p(4)(`${format.magenta('project deploy:')} ${currentTime()}`)\n    const spinner = new SimpleSpinner(msg).start()\n    await this.session.deployProject()\n    spinner.stop()\n    const status = format.grey('project synced:')\n    const duration = timer.getDuration()\n    echo(5)(`${status} ${currentTime()} ${duration}`)\n  }\n\n  async deploySocket (socket, config) {\n    debug(`deploySocket: ${socket.name}`)\n    const deployTimer = new Timer()\n    const msg = p(4)(`${format.magenta('socket deploy:')} ${currentTime()} ${format.cyan(socket.name)}`)\n    const spinner = new SimpleSpinner(msg).start()\n\n    // We have co count here updates\n    if (!pendingUpdates[socket.name]) { pendingUpdates[socket.name] = 0 }\n\n    pendingUpdates[socket.name] += 1\n    if (pendingUpdates[socket.name] > 1) {\n      spinner.stop()\n      this.mainSpinner.start()\n      debug(`not updating, update pending: ${pendingUpdates[socket.name]}`)\n      return\n    }\n\n    // Let's compile and update if it is not hot mode\n    try {\n      const updateStatus = await socket.update({\n        config,\n        withCompilation: true,\n        updateSocketNPMDeps: true,\n        updateEnv: true\n      })\n      spinner.stop()\n      SocketDeployCmd.printUpdateSuccessful(socket.name, updateStatus, deployTimer)\n      if (updateStatus.status !== 0 && this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n    } catch (err) {\n      debug(err)\n      spinner.stop()\n      if (err instanceof CompileError) {\n        const status = format.red('    compile error:')\n        if (err.traceback) {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)}\\n\\n${err.traceback.split('\\n').map(line => p(8)(line)).join('\\n')}`)\n        } else {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)} Error while executing 'build' script!`)\n        }\n      } else {\n        const status = format.red('socket sync error:')\n        if (err.message) {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)} ${format.red(err.message)}`)\n        } else {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)}`)\n          error(err)\n        }\n      }\n\n      if (this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n    }\n  }\n\n  getSocketToUpdate (fileName) {\n    return this.localSockets.find((socket) => socket.isSocketFile(fileName))\n  }\n\n  static bail () {\n    echo()\n    process.exit(1)\n  }\n\n  static printUpdateSuccessful (socketName, updateStatus, deployTimer) {\n    debug('printUpdateSuccessful', socketName, updateStatus)\n    const duration = format.dim(deployTimer.getDuration())\n    const socketNameStr = `${format.cyan(socketName)}`\n\n    if (updateStatus.status === 'ok') {\n      const status = format.grey('socket synced:')\n      echo(6)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    } else if (updateStatus.status === 'stopped') {\n      const status = format.grey('socket in sync:')\n      echo(5)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    } else if (updateStatus.status === 'error') {\n      const errDetail = format.red(updateStatus.message.error)\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration} ${errDetail}`)\n    } else {\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    }\n  }\n}\n"]}