{"version":3,"sources":["../../src/commands/hosting-add.js"],"names":["HostingAdd","constructor","context","session","Socket","hostingName","run","folder","cmd","browserRouter","browserRouterOn","browserRouterOff","sync","dontSync","cname","withoutCname","fullPath","fs","existsSync","format","green","process","exit","responses","inquirer","prompt","getQuestions","name","params","browser_router","src","path","relative","projectPath","join","cwd","CNAME","Hosting","add","syncNewHosting","err","response","data","detail","printErr","message","syncQuestion","type","default","confirm","cyan","HostingSync","socket","questions","push","validate","value"],"mappings":"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","file":"hosting-add.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport format from 'chalk'\nimport inquirer from 'inquirer'\nimport { p, echo, error } from '../utils/print-tools'\nimport HostingSync from './hosting-sync'\nimport Hosting from '../utils/hosting'\n\nclass HostingAdd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.hostingName = null\n  }\n\n  async run ([folder, cmd]) {\n    this.folder = folder\n    this.hostingName = cmd.hostingName || null\n    this.browserRouter = cmd.browserRouterOn || cmd.browserRouterOff || null\n    this.sync = cmd.dontSync ? false : (cmd.sync || null)\n    this.cname = cmd.withoutCname ? false : (cmd.cname || null)\n    this.fullPath = null\n\n    if (!fs.existsSync(this.folder)) {\n      echo()\n      error(4)('Provided path doesn\\'t exist.')\n      echo(4)(`Type ${format.green('mkdir <folder_name>')} to create a folder.`)\n      echo()\n      process.exit(1)\n    }\n\n    const responses = await inquirer.prompt(this.getQuestions()) || {}\n\n    if (!this.hostingName) {\n      this.hostingName = responses.name\n    }\n\n    const params = {\n      name: this.hostingName,\n      browser_router: responses.browser_router || this.browserRouter,\n      src: path.relative(this.session.projectPath, path.join(process.cwd(), this.folder)),\n      cname: responses.CNAME || this.cname\n    }\n\n    try {\n      await Hosting.add(params)\n      await this.syncNewHosting()\n    } catch (err) {\n      echo()\n      try {\n        error(4)(err.response.data.detail)\n      } catch (printErr) {\n        error(4)(printErr.message)\n      }\n      echo()\n    }\n  }\n\n  async syncNewHosting () {\n    if (this.sync == null) {\n      const syncQuestion = [{\n        type: 'confirm',\n        name: 'confirm',\n        message: p(2)('Do you want to sync files now?'),\n        default: true\n      }]\n\n      const response = await inquirer.prompt(syncQuestion)\n      this.sync = response.confirm || this.sync\n    }\n\n    echo()\n    if (!this.sync) {\n      echo(4)(`To sync files use: ${format.cyan(`npx s hosting sync ${this.hostingName}`)}`)\n      echo()\n      return process.exit()\n    }\n\n    new HostingSync(this.context).run([this.hostingName, { socket: this.socket ? this.socket.name : null }])\n  }\n\n  getQuestions () {\n    const questions = []\n    if (!this.hostingName) {\n      questions.push({\n        name: 'name',\n        message: p(2)(\"Set hosting's name\"),\n        default: 'staging',\n        validate: (value) => {\n          if (!value) {\n            return 'This parameter is required!'\n          }\n          return true\n        }\n      })\n    }\n\n    if (this.cname == null) {\n      questions.push({\n        name: 'CNAME',\n        message: p(2)('Set CNAME now (your own domain) or leave it empty')\n      })\n    }\n    if (!this.browserRouter) {\n      questions.push({\n        type: 'confirm',\n        name: 'browser_router',\n        message: p(2)('Do you want to use BrowserRouter for this hosting?')\n      })\n    }\n\n    return questions\n  }\n}\n\nexport default HostingAdd\n"]}