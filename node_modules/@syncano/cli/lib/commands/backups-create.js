'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spinner = require('./helpers/spinner');

var _printTools = require('../utils/print-tools');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class BackupsCreate {
  constructor(context) {
    this.session = context.session;
    this.Backups = context.session.connection.backups;
  }

  run() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        const spinner = new _spinner.SimpleSpinner((0, _printTools.p)(2)('Creating backup...')).start();
        const backup = yield _this.Backups.create();
        yield _this._createBackup(backup.id);
        spinner.stop();
        spinner.succeed((0, _printTools.p)(2)(`Backup was created.`));
        (0, _printTools.echo)();
      } catch (err) {
        (0, _printTools.echo)();
        (0, _printTools.error)(err.message);
        process.exit(1);
      }
    })();
  }

  _createBackup(id) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      yield _this2.timeout(3000);
      const backup = yield _this2.Backups.get(id);

      if (backup.status !== 'success') {
        yield _this2._createBackup(id);
      }
    })();
  }

  timeout(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

exports.default = BackupsCreate;
module.exports = exports['default'];
//# sourceMappingURL=backups-create.js.map