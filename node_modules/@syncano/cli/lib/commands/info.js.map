{"version":3,"sources":["../../src/commands/info.js"],"names":["debug","InfoCmd","constructor","context","session","Init","run","cmd","format","dim","cyan","userEmail","getFullName","project","instance","fromEnv","process","env","SYNCANO_PROJECT_INSTANCE","HOST","instances","getInstances","length","forEach","name"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,UAAP,CAAlB;;AAEe,MAAMC,OAAN,CAAc;AAC3BC,cAAaC,OAAb,EAAsB;AACpBH,UAAM,qBAAN;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,IAAL,GAAYF,QAAQE,IAApB;AACD;;AAEKC,KAAN,CAAW,CAACC,GAAD,CAAX,EAAkB;AAAA;;AAAA;AAChB;AACA,6BAAM,CAAN,EAAU,WAAUC,gBAAOC,GAAP,CAAW,UAAX,CAAuB,GAA3C;AACA,4BAAM,IAAGD,gBAAOE,IAAP,CAAY,MAAKN,OAAL,CAAaO,SAAzB,CAAoC,EAA7C;;AAEA,6BAAM,CAAN,EAAU,UAASH,gBAAOC,GAAP,CAAW,WAAX,CAAwB,GAA3C;AACA,4BAAM,IAAGD,gBAAOE,IAAP,CAAY,MAAKN,OAAL,CAAaQ,WAAb,EAAZ,CAAwC,EAAjD;;AAEA,UAAI,MAAKR,OAAL,CAAaS,OAAb,IAAwB,MAAKT,OAAL,CAAaS,OAAb,CAAqBC,QAAjD,EAA2D;AACzD,+BAAM,CAAN,EAAU,GAAEN,gBAAOC,GAAP,CAAW,kBAAX,CAA+B,GAA3C;AACA,cAAMM,UAAUC,QAAQC,GAAR,CAAYC,wBAAZ,GACZ,6DADY,GAEZ,EAFJ;AAGA,8BAAM,IAAGV,gBAAOE,IAAP,CAAY,MAAKN,OAAL,CAAaS,OAAb,CAAqBC,QAAjC,CAA2C,EAApD;;AAEA,YAAIC,OAAJ,EAAa;AACX,gCAAK,EAAL,EAASP,gBAAOC,GAAP,CAAWM,OAAX,CAAT;AACD;AACF;AACD,6BAAM,CAAN,EAAU,YAAWP,gBAAOC,GAAP,CAAW,SAAX,CAAsB,GAA3C;AACA,4BAAM,IAAGD,gBAAOE,IAAP,CAAY,MAAKN,OAAL,CAAae,IAAzB,CAA+B,EAAxC;;AAEA,YAAMC,YAAY,MAAM,MAAKhB,OAAL,CAAaiB,YAAb,EAAxB;AACA,UAAID,UAAUE,MAAV,GAAmB,CAAvB,EAA0B;AACxB;AACA,8BAAK,CAAL,EAAQ,gCAAR;AACA;AACD,OAJD,MAIO;AACL,8BAAK,CAAL,EAAS,MAAKd,gBAAOC,GAAP,CAAW,eAAX,CAA4B,GAA1C;AACAW,kBAAUG,OAAV,CAAkB,oBAAY;AAC5B,gCAAK,EAAL,EAAU,KAAIf,gBAAOE,IAAP,CAAYI,SAASU,IAArB,CAA2B,EAAzC;AACD,SAFD;AAGA;AACD;;AAED,UAAI,CAAC,MAAKpB,OAAL,CAAaS,OAAlB,EAA2B;AACzB,iCAAQ,CAAR,EAAW,uCAAX;AACA;AACD;AAtCe;AAuCjB;AA/C0B;kBAARZ,O","file":"info.js","sourcesContent":["import format from 'chalk'\n\nimport logger from '../utils/debug'\nimport { echo, echon, warning } from '../utils/print-tools'\n\nconst { debug } = logger('cmd-info')\n\nexport default class InfoCmd {\n  constructor (context) {\n    debug('InfoCmd.constructor')\n    this.context = context\n    this.session = context.session\n    this.Init = context.Init\n  }\n\n  async run ([cmd]) {\n    echo()\n    echon(2)(`        ${format.dim('username')}:`)\n    echo(` ${format.cyan(this.session.userEmail)}`)\n\n    echon(2)(`       ${format.dim('full name')}:`)\n    echo(` ${format.cyan(this.session.getFullName())}`)\n\n    if (this.session.project && this.session.project.instance) {\n      echon(2)(`${format.dim('current instance')}:`)\n      const fromEnv = process.env.SYNCANO_PROJECT_INSTANCE\n        ? ' (taken from SYNCANO_PROJECT_INSTANCE environment variable)'\n        : ''\n      echo(` ${format.cyan(this.session.project.instance)}`)\n\n      if (fromEnv) {\n        echo(19)(format.dim(fromEnv))\n      }\n    }\n    echon(2)(`         ${format.dim('api url')}:`)\n    echo(` ${format.cyan(this.session.HOST)}`)\n\n    const instances = await this.session.getInstances()\n    if (instances.length < 1) {\n      echo()\n      echo(4)('You don\\'t have any instances!')\n      echo()\n    } else {\n      echo(2)(`   ${format.dim('all instances')}:`)\n      instances.forEach(instance => {\n        echo(18)(`- ${format.cyan(instance.name)}`)\n      })\n      echo()\n    }\n\n    if (!this.session.project) {\n      warning(2)('No Syncano project in current folder!')\n      echo()\n    }\n  }\n}\n"]}