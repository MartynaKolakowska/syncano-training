{"version":3,"sources":["../../src/commands/backups-create.js"],"names":["BackupsCreate","constructor","context","session","Backups","connection","backups","run","spinner","SimpleSpinner","start","backup","create","_createBackup","id","stop","succeed","err","message","process","exit","timeout","get","status","ms","Promise","resolve","setTimeout"],"mappings":";;;;;;AAAA;;AACA;;;;AAEA,MAAMA,aAAN,CAAoB;AAClBC,cAAaC,OAAb,EAAsB;AACpB,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,OAAL,GAAeF,QAAQC,OAAR,CAAgBE,UAAhB,CAA2BC,OAA1C;AACD;;AAEKC,KAAN,GAAa;AAAA;;AAAA;AACX,UAAI;AACF,cAAMC,UAAU,IAAIC,sBAAJ,CAAkB,mBAAE,CAAF,EAAK,oBAAL,CAAlB,EAA8CC,KAA9C,EAAhB;AACA,cAAMC,SAAS,MAAM,MAAKP,OAAL,CAAaQ,MAAb,EAArB;AACA,cAAM,MAAKC,aAAL,CAAmBF,OAAOG,EAA1B,CAAN;AACAN,gBAAQO,IAAR;AACAP,gBAAQQ,OAAR,CAAgB,mBAAE,CAAF,EAAM,qBAAN,CAAhB;AACA;AACD,OAPD,CAOE,OAAOC,GAAP,EAAY;AACZ;AACA,+BAAMA,IAAIC,OAAV;AACAC,gBAAQC,IAAR,CAAa,CAAb;AACD;AAZU;AAaZ;;AAEKP,eAAN,CAAqBC,EAArB,EAAyB;AAAA;;AAAA;AACvB,YAAM,OAAKO,OAAL,CAAa,IAAb,CAAN;AACA,YAAMV,SAAS,MAAM,OAAKP,OAAL,CAAakB,GAAb,CAAiBR,EAAjB,CAArB;;AAEA,UAAIH,OAAOY,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,cAAM,OAAKV,aAAL,CAAmBC,EAAnB,CAAN;AACD;AANsB;AAOxB;;AAEDO,UAASG,EAAT,EAAa;AACX,WAAO,IAAIC,OAAJ,CAAYC,WAAWC,WAAWD,OAAX,EAAoBF,EAApB,CAAvB,CAAP;AACD;AAhCiB;;kBAmCLxB,a","file":"backups-create.js","sourcesContent":["import { SimpleSpinner } from './helpers/spinner'\nimport { p, echo, error } from '../utils/print-tools'\n\nclass BackupsCreate {\n  constructor (context) {\n    this.session = context.session\n    this.Backups = context.session.connection.backups\n  }\n\n  async run () {\n    try {\n      const spinner = new SimpleSpinner(p(2)('Creating backup...')).start()\n      const backup = await this.Backups.create()\n      await this._createBackup(backup.id)\n      spinner.stop()\n      spinner.succeed(p(2)(`Backup was created.`))\n      echo()\n    } catch (err) {\n      echo()\n      error(err.message)\n      process.exit(1)\n    }\n  }\n\n  async _createBackup (id) {\n    await this.timeout(3000)\n    const backup = await this.Backups.get(id)\n\n    if (backup.status !== 'success') {\n      await this._createBackup(id)\n    }\n  }\n\n  timeout (ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nexport default BackupsCreate\n"]}