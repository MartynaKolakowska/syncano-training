{"version":3,"sources":["../../src/commands/attach.js"],"names":["debug","Attach","constructor","context","session","Init","run","cmd","init","project","confirmQuestion","type","name","message","default","confirm","inquirer","prompt","process","exit","instanceName","instance","createInstance","questions","getQuestions","answer","trim","createNewInstance","addConfigFiles","projectPath","format","green","load","randomName","instances","getInstances","instancesNames","map","unshift","push","pageSize","choices"],"mappings":"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","file":"attach.js","sourcesContent":["import inquirer from 'inquirer'\n\nimport logger from '../utils/debug'\nimport format from 'chalk'\nimport { p, echo } from '../utils/print-tools'\nimport genUniqueInstanceName from '../utils/unique-instance'\nimport { createInstance } from './helpers/create-instance'\n\nconst { debug } = logger('cmd-attach')\n\nclass Attach {\n  constructor (context) {\n    debug('Attach.constructor')\n    this.session = context.session\n    this.Init = context.Init\n  }\n\n  async run ([cmd = {}]) {\n    this.cmd = cmd\n    this.init = new this.Init()\n\n    if (this.session.project) {\n      const confirmQuestion = [{\n        type: 'confirm',\n        name: 'confirm',\n        message: p(2)('This project is already attached. Are you sure you want to change instance?'),\n        default: false\n      }]\n\n      const { confirm } = await inquirer.prompt(confirmQuestion) || {}\n      if (confirm === false) return process.exit()\n    }\n\n    let instanceName\n    let instance\n\n    if (cmd.createInstance) {\n      instance = await createInstance(cmd.createInstance)\n      instanceName = instance.name\n    } else {\n      const questions = await this.getQuestions()\n      const answer = await inquirer.prompt(questions) || {}\n\n      instanceName = answer.instance &&\n        answer.instance !== p(2)('Create a new one...')\n        ? answer.instance.trim() : null\n    }\n\n    if (!instanceName) {\n      instance = await this.createNewInstance()\n      instanceName = instance.name\n    }\n\n    await this.init.addConfigFiles({ instance: instanceName }, this.session.projectPath)\n    echo(4)(`Your project is attached to ${format.green(instanceName)} instance now!`)\n    echo()\n\n    return this.session.load()\n  }\n\n  async createNewInstance () {\n    const randomName = genUniqueInstanceName()\n    const { instanceName } = await inquirer.prompt([\n      {\n        name: 'instanceName',\n        type: 'input',\n        default: randomName,\n        message: p(2)('Choose instance name for your project:')\n      }\n    ])\n\n    return createInstance(instanceName)\n  }\n\n  async getQuestions () {\n    debug('getQuestions')\n    const questions = []\n\n    if (!this.cmd.instance) {\n      const instances = await this.session.getInstances()\n      const instancesNames = instances.map((instance) => p(2)(instance.name))\n      instancesNames.unshift(p(2)('Create a new one...'))\n\n      questions.push({\n        name: 'instance',\n        type: 'list',\n        pageSize: 16,\n        message: p(2)('Choose instance for your project:'),\n        choices: instancesNames,\n        default: 0\n      })\n    }\n\n    return questions\n  }\n}\n\nexport default Attach\n"]}