{"version":3,"sources":["../../src/settings/projectSettings.js"],"names":["debug","ProjectSettings","Settings","constructor","projectPath","name","baseDir","loaded","load","getPlugins","attributes","plugins","getAllSocketsYmlPath","Promise","resolve","reject","paths","root","fileFilter","on","entry","push","fullPath","err","getHostingsList","socketYamls","hostingsList","socketsAttributes","map","yamlPath","getAttributesFromYaml","forEach","socketAttributes","hosting","path","YAML","fs","readFileSync","getSocketTemplates","templates","sockets","getHosting","hostingName","addHosting","params","save","updateHosting","_","extend","deleteHosting","listHosting","length","hostings","list","key","Object","keys","src"],"mappings":"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","file":"projectSettings.js","sourcesContent":["import _ from 'lodash'\nimport readdirp from 'readdirp'\nimport YAML from 'js-yaml'\nimport fs from 'fs'\n\nimport logger from '../utils/debug'\nimport Settings from './settings'\n\nconst { debug } = logger('settings-project')\n\nexport default class ProjectSettings extends Settings {\n  constructor (projectPath) {\n    super()\n    this.name = 'syncano'\n    this.baseDir = projectPath\n    if (projectPath) {\n      this.loaded = this.load()\n    }\n  }\n\n  getPlugins () {\n    return this.attributes.plugins\n  }\n\n  getAllSocketsYmlPath () {\n    return new Promise((resolve, reject) => {\n      const paths = []\n      readdirp({ root: this.baseDir, fileFilter: 'socket.yml' })\n        .on('data', (entry) => {\n          paths.push(entry.fullPath)\n        })\n        .on('end', () => {\n          resolve(paths)\n        })\n        .on('error', (err) => {\n          reject(err)\n        })\n    })\n  }\n\n  async getHostingsList () {\n    const socketYamls = await this.getAllSocketsYmlPath()\n    const hostingsList = {}\n\n    const socketsAttributes = socketYamls.map((yamlPath) => ProjectSettings.getAttributesFromYaml(yamlPath))\n    socketsAttributes.forEach((socketAttributes) => {\n      hostingsList[socketAttributes.name] = socketAttributes.hosting\n    })\n\n    return hostingsList\n  }\n\n  static getAttributesFromYaml (path) {\n    const socketAttributes = YAML.load(fs.readFileSync(path, 'utf8'))\n\n    return socketAttributes\n  }\n\n  getSocketTemplates () {\n    try {\n      return this.attributes.templates.sockets\n    } catch (err) {\n      return []\n    }\n  }\n\n  // Hosting\n  getHosting (hostingName) {\n    debug('getHosting()')\n    return this.attributes.hosting ? this.attributes.hosting[hostingName] : null\n  }\n\n  addHosting (hostingName, params) {\n    if (!this.attributes.hosting) this.attributes.hosting = {}\n    this.attributes.hosting[hostingName] = params\n    this.save()\n  }\n\n  updateHosting (hostingName, params) {\n    if (!this.attributes.hosting) this.attributes.hosting = {}\n    this.attributes.hosting[hostingName] = _.extend(this.attributes.hosting[hostingName], params)\n    this.save()\n  }\n\n  deleteHosting (hostingName) {\n    if (this.attributes.hosting) {\n      delete this.attributes.hosting[hostingName]\n    }\n\n    if (this.listHosting().length === 0) {\n      delete this.attributes.hosting\n    }\n    this.save()\n  }\n\n  listHosting () {\n    debug('list()')\n    const hostings = this.attributes.hosting\n    const list = []\n    if (hostings) {\n      for (const key of Object.keys(hostings)) {\n        list.push({\n          name: key,\n          src: hostings[key].src\n        })\n      }\n    }\n    return list\n  }\n}\n"]}