'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getSocketSettings;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _findKey = require('find-key');

var _findKey2 = _interopRequireDefault(_findKey);

var _debug = require('../utils/debug');

var _debug2 = _interopRequireDefault(_debug);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { debug } = (0, _debug2.default)('setting-socket');

class SocketSettings extends _settings2.default {
  constructor(socketPath, socketName) {
    debug('SocketSettings.constructor', socketPath, socketName);
    super();
    this.name = 'socket';
    this.baseDir = socketPath;
    this.loaded = this.load();
    this.attributes.version = this.readVersion();
  }

  readVersion() {
    try {
      const pjson = require(`${_path2.default.join(this.baseDir, 'package.json')}`);
      return pjson.version;
    } catch (err) {
      return null;
    }
  }

  getScripts() {
    return (0, _findKey2.default)(this.attributes, 'file');
  }

  getFileForEndpoint(endpointName) {
    return this.attributes.endpoints[endpointName].file;
  }

  getConfigOptions() {
    return this.attributes.config || {};
  }

  getConfig() {
    const config = {};
    const configMetadata = this.getConfigOptions();
    Object.keys(configMetadata).forEach(key => {
      if (configMetadata[key].value) {
        config[key] = configMetadata[key].default;
      }
    });
    return config;
  }

  getFull() {
    return this.attributes;
  }

  getVersion() {
    return this.attributes.version || '0.0.0';
  }

  bumpVersion(bumpType) {
    const newVersion = _semver2.default.inc(this.getVersion(), bumpType);
    debug('newVersion', this.getVersion(), bumpType, newVersion);
    this.set('version', newVersion, true);
    return this.getVersion();
  }
}

function getSocketSettings(socketPath, socketName) {
  return new SocketSettings(socketPath, socketName);
}
module.exports = exports['default'];
//# sourceMappingURL=socketSettings.js.map