{"version":3,"sources":["../../src/settings/socketSettings.js"],"names":["getSocketSettings","debug","SocketSettings","Settings","constructor","socketPath","socketName","name","baseDir","loaded","load","attributes","version","readVersion","pjson","require","path","join","err","getScripts","getFileForEndpoint","endpointName","endpoints","file","getConfigOptions","config","getConfig","configMetadata","Object","keys","forEach","key","value","default","getFull","getVersion","bumpVersion","bumpType","newVersion","semver","inc","set"],"mappings":";;;;;kBAmEwBA,iB;;AAnExB;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,MAAM,EAAEC,KAAF,KAAY,qBAAO,gBAAP,CAAlB;;AAEA,MAAMC,cAAN,SAA6BC,kBAA7B,CAAsC;AACpCC,cAAaC,UAAb,EAAyBC,UAAzB,EAAqC;AACnCL,UAAM,4BAAN,EAAoCI,UAApC,EAAgDC,UAAhD;AACA;AACA,SAAKC,IAAL,GAAY,QAAZ;AACA,SAAKC,OAAL,GAAeH,UAAf;AACA,SAAKI,MAAL,GAAc,KAAKC,IAAL,EAAd;AACA,SAAKC,UAAL,CAAgBC,OAAhB,GAA0B,KAAKC,WAAL,EAA1B;AACD;;AAEDA,gBAAe;AACb,QAAI;AACF,YAAMC,QAAQC,QAAS,GAAEC,eAAKC,IAAL,CAAU,KAAKT,OAAf,EAAwB,cAAxB,CAAwC,EAAnD,CAAd;AACA,aAAOM,MAAMF,OAAb;AACD,KAHD,CAGE,OAAOM,GAAP,EAAY;AACZ,aAAO,IAAP;AACD;AACF;;AAEDC,eAAc;AACZ,WAAO,uBAAQ,KAAKR,UAAb,EAAyB,MAAzB,CAAP;AACD;;AAEDS,qBAAoBC,YAApB,EAAkC;AAChC,WAAO,KAAKV,UAAL,CAAgBW,SAAhB,CAA0BD,YAA1B,EAAwCE,IAA/C;AACD;;AAEDC,qBAAoB;AAClB,WAAO,KAAKb,UAAL,CAAgBc,MAAhB,IAA0B,EAAjC;AACD;;AAEDC,cAAa;AACX,UAAMD,SAAS,EAAf;AACA,UAAME,iBAAiB,KAAKH,gBAAL,EAAvB;AACAI,WAAOC,IAAP,CAAYF,cAAZ,EAA4BG,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAIJ,eAAeI,GAAf,EAAoBC,KAAxB,EAA+B;AAC7BP,eAAOM,GAAP,IAAcJ,eAAeI,GAAf,EAAoBE,OAAlC;AACD;AACF,KAJD;AAKA,WAAOR,MAAP;AACD;;AAEDS,YAAW;AACT,WAAO,KAAKvB,UAAZ;AACD;;AAEDwB,eAAc;AACZ,WAAO,KAAKxB,UAAL,CAAgBC,OAAhB,IAA2B,OAAlC;AACD;;AAEDwB,cAAaC,QAAb,EAAuB;AACrB,UAAMC,aAAaC,iBAAOC,GAAP,CAAW,KAAKL,UAAL,EAAX,EAA8BE,QAA9B,CAAnB;AACApC,UAAM,YAAN,EAAoB,KAAKkC,UAAL,EAApB,EAAuCE,QAAvC,EAAiDC,UAAjD;AACA,SAAKG,GAAL,CAAS,SAAT,EAAoBH,UAApB,EAAgC,IAAhC;AACA,WAAO,KAAKH,UAAL,EAAP;AACD;AAvDmC;;AA0DvB,SAASnC,iBAAT,CAA4BK,UAA5B,EAAwCC,UAAxC,EAAoD;AACjE,SAAO,IAAIJ,cAAJ,CAAmBG,UAAnB,EAA+BC,UAA/B,CAAP;AACD","file":"socketSettings.js","sourcesContent":["import path from 'path'\nimport semver from 'semver'\nimport FindKey from 'find-key'\n\nimport logger from '../utils/debug'\nimport Settings from './settings'\n\nconst { debug } = logger('setting-socket')\n\nclass SocketSettings extends Settings {\n  constructor (socketPath, socketName) {\n    debug('SocketSettings.constructor', socketPath, socketName)\n    super()\n    this.name = 'socket'\n    this.baseDir = socketPath\n    this.loaded = this.load()\n    this.attributes.version = this.readVersion()\n  }\n\n  readVersion () {\n    try {\n      const pjson = require(`${path.join(this.baseDir, 'package.json')}`)\n      return pjson.version\n    } catch (err) {\n      return null\n    }\n  }\n\n  getScripts () {\n    return FindKey(this.attributes, 'file')\n  }\n\n  getFileForEndpoint (endpointName) {\n    return this.attributes.endpoints[endpointName].file\n  }\n\n  getConfigOptions () {\n    return this.attributes.config || {}\n  }\n\n  getConfig () {\n    const config = {}\n    const configMetadata = this.getConfigOptions()\n    Object.keys(configMetadata).forEach((key) => {\n      if (configMetadata[key].value) {\n        config[key] = configMetadata[key].default\n      }\n    })\n    return config\n  }\n\n  getFull () {\n    return this.attributes\n  }\n\n  getVersion () {\n    return this.attributes.version || '0.0.0'\n  }\n\n  bumpVersion (bumpType) {\n    const newVersion = semver.inc(this.getVersion(), bumpType)\n    debug('newVersion', this.getVersion(), bumpType, newVersion)\n    this.set('version', newVersion, true)\n    return this.getVersion()\n  }\n}\n\nexport default function getSocketSettings (socketPath, socketName) {\n  return new SocketSettings(socketPath, socketName)\n}\n"]}